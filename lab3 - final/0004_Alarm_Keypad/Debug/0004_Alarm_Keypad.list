
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000219c  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c00  08009c00  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009c00  08009c00  0000ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c08  08009c08  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c08  08009c08  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c10  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005064  20000074  08009c84  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d8  08009c84  0000b0d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c554  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c42  00000000  00000000  000275f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012fb  00000000  00000000  0002ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002477c  00000000  00000000  0002dd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d784  00000000  00000000  000524ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de5ed  00000000  00000000  0006fc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014e260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c4c  00000000  00000000  0014e2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00154ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a4c 	.word	0x08007a4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007a4c 	.word	0x08007a4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	int done=1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
	while(done)
 80005ba:	e19b      	b.n	80008f4 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c2:	48b3      	ldr	r0, [pc, #716]	@ (8000890 <Get_Key+0x2e0>)
 80005c4:	f001 fc5e 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	48b0      	ldr	r0, [pc, #704]	@ (8000890 <Get_Key+0x2e0>)
 80005ce:	f001 fc59 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	48ae      	ldr	r0, [pc, #696]	@ (8000890 <Get_Key+0x2e0>)
 80005d8:	f001 fc54 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	48ab      	ldr	r0, [pc, #684]	@ (8000890 <Get_Key+0x2e0>)
 80005e2:	f001 fc4f 	bl	8001e84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	48a9      	ldr	r0, [pc, #676]	@ (8000890 <Get_Key+0x2e0>)
 80005ea:	f001 fc33 	bl	8001e54 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80005f4:	bf00      	nop
 80005f6:	2140      	movs	r1, #64	@ 0x40
 80005f8:	48a5      	ldr	r0, [pc, #660]	@ (8000890 <Get_Key+0x2e0>)
 80005fa:	f001 fc2b 	bl	8001e54 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f8      	bne.n	80005f6 <Get_Key+0x46>
		key='1';
 8000604:	4ba3      	ldr	r3, [pc, #652]	@ (8000894 <Get_Key+0x2e4>)
 8000606:	2231      	movs	r2, #49	@ 0x31
 8000608:	701a      	strb	r2, [r3, #0]
		break;
 800060a:	e177      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	48a2      	ldr	r0, [pc, #648]	@ (8000898 <Get_Key+0x2e8>)
 8000610:	f001 fc20 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 800061a:	bf00      	nop
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	489e      	ldr	r0, [pc, #632]	@ (8000898 <Get_Key+0x2e8>)
 8000620:	f001 fc18 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1f8      	bne.n	800061c <Get_Key+0x6c>
		key='4';
 800062a:	4b9a      	ldr	r3, [pc, #616]	@ (8000894 <Get_Key+0x2e4>)
 800062c:	2234      	movs	r2, #52	@ 0x34
 800062e:	701a      	strb	r2, [r3, #0]
		break;
 8000630:	e164      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000636:	4899      	ldr	r0, [pc, #612]	@ (800089c <Get_Key+0x2ec>)
 8000638:	f001 fc0c 	bl	8001e54 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00c      	beq.n	800065c <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000642:	bf00      	nop
 8000644:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000648:	4894      	ldr	r0, [pc, #592]	@ (800089c <Get_Key+0x2ec>)
 800064a:	f001 fc03 	bl	8001e54 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f7      	bne.n	8000644 <Get_Key+0x94>
		key='7';
 8000654:	4b8f      	ldr	r3, [pc, #572]	@ (8000894 <Get_Key+0x2e4>)
 8000656:	2237      	movs	r2, #55	@ 0x37
 8000658:	701a      	strb	r2, [r3, #0]
		break;
 800065a:	e14f      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	488e      	ldr	r0, [pc, #568]	@ (800089c <Get_Key+0x2ec>)
 8000662:	f001 fbf7 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00c      	beq.n	8000686 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800066c:	bf00      	nop
 800066e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000672:	488a      	ldr	r0, [pc, #552]	@ (800089c <Get_Key+0x2ec>)
 8000674:	f001 fbee 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f7      	bne.n	800066e <Get_Key+0xbe>
		key='*';
 800067e:	4b85      	ldr	r3, [pc, #532]	@ (8000894 <Get_Key+0x2e4>)
 8000680:	222a      	movs	r2, #42	@ 0x2a
 8000682:	701a      	strb	r2, [r3, #0]
		break;
 8000684:	e13a      	b.n	80008fc <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800068c:	4880      	ldr	r0, [pc, #512]	@ (8000890 <Get_Key+0x2e0>)
 800068e:	f001 fbf9 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	487e      	ldr	r0, [pc, #504]	@ (8000890 <Get_Key+0x2e0>)
 8000698:	f001 fbf4 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800069c:	2200      	movs	r2, #0
 800069e:	2120      	movs	r1, #32
 80006a0:	487b      	ldr	r0, [pc, #492]	@ (8000890 <Get_Key+0x2e0>)
 80006a2:	f001 fbef 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	4879      	ldr	r0, [pc, #484]	@ (8000890 <Get_Key+0x2e0>)
 80006ac:	f001 fbea 	bl	8001e84 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006b0:	2140      	movs	r1, #64	@ 0x40
 80006b2:	4877      	ldr	r0, [pc, #476]	@ (8000890 <Get_Key+0x2e0>)
 80006b4:	f001 fbce 	bl	8001e54 <HAL_GPIO_ReadPin>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006be:	bf00      	nop
 80006c0:	2140      	movs	r1, #64	@ 0x40
 80006c2:	4873      	ldr	r0, [pc, #460]	@ (8000890 <Get_Key+0x2e0>)
 80006c4:	f001 fbc6 	bl	8001e54 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f8      	bne.n	80006c0 <Get_Key+0x110>
		key='2';
 80006ce:	4b71      	ldr	r3, [pc, #452]	@ (8000894 <Get_Key+0x2e4>)
 80006d0:	2232      	movs	r2, #50	@ 0x32
 80006d2:	701a      	strb	r2, [r3, #0]
		break;
 80006d4:	e112      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	486f      	ldr	r0, [pc, #444]	@ (8000898 <Get_Key+0x2e8>)
 80006da:	f001 fbbb 	bl	8001e54 <HAL_GPIO_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006e4:	bf00      	nop
 80006e6:	2180      	movs	r1, #128	@ 0x80
 80006e8:	486b      	ldr	r0, [pc, #428]	@ (8000898 <Get_Key+0x2e8>)
 80006ea:	f001 fbb3 	bl	8001e54 <HAL_GPIO_ReadPin>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f8      	bne.n	80006e6 <Get_Key+0x136>
		key='5';
 80006f4:	4b67      	ldr	r3, [pc, #412]	@ (8000894 <Get_Key+0x2e4>)
 80006f6:	2235      	movs	r2, #53	@ 0x35
 80006f8:	701a      	strb	r2, [r3, #0]
		break;
 80006fa:	e0ff      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80006fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000700:	4866      	ldr	r0, [pc, #408]	@ (800089c <Get_Key+0x2ec>)
 8000702:	f001 fba7 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800070c:	bf00      	nop
 800070e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000712:	4862      	ldr	r0, [pc, #392]	@ (800089c <Get_Key+0x2ec>)
 8000714:	f001 fb9e 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d1f7      	bne.n	800070e <Get_Key+0x15e>
		key='8';
 800071e:	4b5d      	ldr	r3, [pc, #372]	@ (8000894 <Get_Key+0x2e4>)
 8000720:	2238      	movs	r2, #56	@ 0x38
 8000722:	701a      	strb	r2, [r3, #0]
		break;
 8000724:	e0ea      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	485c      	ldr	r0, [pc, #368]	@ (800089c <Get_Key+0x2ec>)
 800072c:	f001 fb92 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00c      	beq.n	8000750 <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000736:	bf00      	nop
 8000738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073c:	4857      	ldr	r0, [pc, #348]	@ (800089c <Get_Key+0x2ec>)
 800073e:	f001 fb89 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f7      	bne.n	8000738 <Get_Key+0x188>
		key='0';
 8000748:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <Get_Key+0x2e4>)
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	701a      	strb	r2, [r3, #0]
		break;
 800074e:	e0d5      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	484e      	ldr	r0, [pc, #312]	@ (8000890 <Get_Key+0x2e0>)
 8000758:	f001 fb94 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	484b      	ldr	r0, [pc, #300]	@ (8000890 <Get_Key+0x2e0>)
 8000762:	f001 fb8f 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4849      	ldr	r0, [pc, #292]	@ (8000890 <Get_Key+0x2e0>)
 800076c:	f001 fb8a 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 8000770:	2200      	movs	r2, #0
 8000772:	2108      	movs	r1, #8
 8000774:	4846      	ldr	r0, [pc, #280]	@ (8000890 <Get_Key+0x2e0>)
 8000776:	f001 fb85 	bl	8001e84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	4844      	ldr	r0, [pc, #272]	@ (8000890 <Get_Key+0x2e0>)
 800077e:	f001 fb69 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000788:	bf00      	nop
 800078a:	2140      	movs	r1, #64	@ 0x40
 800078c:	4840      	ldr	r0, [pc, #256]	@ (8000890 <Get_Key+0x2e0>)
 800078e:	f001 fb61 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f8      	bne.n	800078a <Get_Key+0x1da>
		key='3';
 8000798:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <Get_Key+0x2e4>)
 800079a:	2233      	movs	r2, #51	@ 0x33
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e0ad      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007a0:	2180      	movs	r1, #128	@ 0x80
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <Get_Key+0x2e8>)
 80007a4:	f001 fb56 	bl	8001e54 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00b      	beq.n	80007c6 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ae:	bf00      	nop
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4839      	ldr	r0, [pc, #228]	@ (8000898 <Get_Key+0x2e8>)
 80007b4:	f001 fb4e 	bl	8001e54 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d1f8      	bne.n	80007b0 <Get_Key+0x200>
		key='6';
 80007be:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <Get_Key+0x2e4>)
 80007c0:	2236      	movs	r2, #54	@ 0x36
 80007c2:	701a      	strb	r2, [r3, #0]
		break;
 80007c4:	e09a      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ca:	4834      	ldr	r0, [pc, #208]	@ (800089c <Get_Key+0x2ec>)
 80007cc:	f001 fb42 	bl	8001e54 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d00c      	beq.n	80007f0 <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007d6:	bf00      	nop
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <Get_Key+0x2ec>)
 80007de:	f001 fb39 	bl	8001e54 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f7      	bne.n	80007d8 <Get_Key+0x228>
		key='9';
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <Get_Key+0x2e4>)
 80007ea:	2239      	movs	r2, #57	@ 0x39
 80007ec:	701a      	strb	r2, [r3, #0]
		break;
 80007ee:	e085      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f4:	4829      	ldr	r0, [pc, #164]	@ (800089c <Get_Key+0x2ec>)
 80007f6:	f001 fb2d 	bl	8001e54 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00c      	beq.n	800081a <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000800:	bf00      	nop
 8000802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000806:	4825      	ldr	r0, [pc, #148]	@ (800089c <Get_Key+0x2ec>)
 8000808:	f001 fb24 	bl	8001e54 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f7      	bne.n	8000802 <Get_Key+0x252>
		key='#';
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <Get_Key+0x2e4>)
 8000814:	2223      	movs	r2, #35	@ 0x23
 8000816:	701a      	strb	r2, [r3, #0]
		break;
 8000818:	e070      	b.n	80008fc <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000820:	481b      	ldr	r0, [pc, #108]	@ (8000890 <Get_Key+0x2e0>)
 8000822:	f001 fb2f 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000826:	2200      	movs	r2, #0
 8000828:	2110      	movs	r1, #16
 800082a:	4819      	ldr	r0, [pc, #100]	@ (8000890 <Get_Key+0x2e0>)
 800082c:	f001 fb2a 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 8000830:	2200      	movs	r2, #0
 8000832:	2120      	movs	r1, #32
 8000834:	4816      	ldr	r0, [pc, #88]	@ (8000890 <Get_Key+0x2e0>)
 8000836:	f001 fb25 	bl	8001e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 800083a:	2201      	movs	r2, #1
 800083c:	2108      	movs	r1, #8
 800083e:	4814      	ldr	r0, [pc, #80]	@ (8000890 <Get_Key+0x2e0>)
 8000840:	f001 fb20 	bl	8001e84 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <Get_Key+0x2e0>)
 8000848:	f001 fb04 	bl	8001e54 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d00b      	beq.n	800086a <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000852:	bf00      	nop
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <Get_Key+0x2e0>)
 8000858:	f001 fafc 	bl	8001e54 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f8      	bne.n	8000854 <Get_Key+0x2a4>
		key='A';
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <Get_Key+0x2e4>)
 8000864:	2241      	movs	r2, #65	@ 0x41
 8000866:	701a      	strb	r2, [r3, #0]
		break;
 8000868:	e048      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 800086a:	2180      	movs	r1, #128	@ 0x80
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <Get_Key+0x2e8>)
 800086e:	f001 faf1 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d013      	beq.n	80008a0 <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000878:	bf00      	nop
 800087a:	2180      	movs	r1, #128	@ 0x80
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <Get_Key+0x2e8>)
 800087e:	f001 fae9 	bl	8001e54 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1f8      	bne.n	800087a <Get_Key+0x2ca>
		key='B';
 8000888:	4b02      	ldr	r3, [pc, #8]	@ (8000894 <Get_Key+0x2e4>)
 800088a:	2242      	movs	r2, #66	@ 0x42
 800088c:	701a      	strb	r2, [r3, #0]
		break;
 800088e:	e035      	b.n	80008fc <Get_Key+0x34c>
 8000890:	40020400 	.word	0x40020400
 8000894:	20000090 	.word	0x20000090
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <Get_Key+0x360>)
 80008a6:	f001 fad5 	bl	8001e54 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00c      	beq.n	80008ca <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008b0:	bf00      	nop
 80008b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b6:	4816      	ldr	r0, [pc, #88]	@ (8000910 <Get_Key+0x360>)
 80008b8:	f001 facc 	bl	8001e54 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f7      	bne.n	80008b2 <Get_Key+0x302>
		key='C';
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <Get_Key+0x364>)
 80008c4:	2243      	movs	r2, #67	@ 0x43
 80008c6:	701a      	strb	r2, [r3, #0]
		break;
 80008c8:	e018      	b.n	80008fc <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4810      	ldr	r0, [pc, #64]	@ (8000910 <Get_Key+0x360>)
 80008d0:	f001 fac0 	bl	8001e54 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00c      	beq.n	80008f4 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008da:	bf00      	nop
 80008dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <Get_Key+0x360>)
 80008e2:	f001 fab7 	bl	8001e54 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f7      	bne.n	80008dc <Get_Key+0x32c>
		key='D';
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <Get_Key+0x364>)
 80008ee:	2244      	movs	r2, #68	@ 0x44
 80008f0:	701a      	strb	r2, [r3, #0]
		break;
 80008f2:	e003      	b.n	80008fc <Get_Key+0x34c>
	while(done)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f47f ae60 	bne.w	80005bc <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008fc:	2120      	movs	r1, #32
 80008fe:	4804      	ldr	r0, [pc, #16]	@ (8000910 <Get_Key+0x360>)
 8000900:	f001 fad9 	bl	8001eb6 <HAL_GPIO_TogglePin>
	return(key);
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <Get_Key+0x364>)
 8000906:	781b      	ldrb	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40020000 	.word	0x40020000
 8000914:	20000090 	.word	0x20000090

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 ffbe 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f844 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f908 	bl	8000b38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f8dc 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800092c:	f000 f8ac 	bl	8000a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000930:	f000 fb26 	bl	8000f80 <SSD1306_Init>
    SSD1306_GotoXY(0, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f000 fc8c 	bl	8001254 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts("Enter Code:", &Font_11x18, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	4913      	ldr	r1, [pc, #76]	@ (800098c <main+0x74>)
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <main+0x78>)
 8000942:	f000 fd1b 	bl	800137c <SSD1306_Puts>
    SSD1306_GotoXY(0, 30);
 8000946:	211e      	movs	r1, #30
 8000948:	2000      	movs	r0, #0
 800094a:	f000 fc83 	bl	8001254 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 800094e:	f000 fbdb 	bl	8001108 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 8000952:	f000 fbd9 	bl	8001108 <SSD1306_UpdateScreen>
    HAL_Delay(500);
 8000956:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800095a:	f000 ffe1 	bl	8001920 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800095e:	f003 fd9d 	bl	800449c <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of keypadTask */
  keypadTaskHandle = osThreadNew(StartKeypadTask, NULL, &keypadTask_attributes);
 8000962:	4a0c      	ldr	r2, [pc, #48]	@ (8000994 <main+0x7c>)
 8000964:	2100      	movs	r1, #0
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <main+0x80>)
 8000968:	f003 fde2 	bl	8004530 <osThreadNew>
 800096c:	4603      	mov	r3, r0
 800096e:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <main+0x84>)
 8000970:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <main+0x88>)
 8000974:	2100      	movs	r1, #0
 8000976:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <main+0x8c>)
 8000978:	f003 fdda 	bl	8004530 <osThreadNew>
 800097c:	4603      	mov	r3, r0
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <main+0x90>)
 8000980:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000982:	f003 fdaf 	bl	80044e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000986:	bf00      	nop
 8000988:	e7fd      	b.n	8000986 <main+0x6e>
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	08007a7c 	.word	0x08007a7c
 8000994:	08009b6c 	.word	0x08009b6c
 8000998:	08000cd5 	.word	0x08000cd5
 800099c:	20000130 	.word	0x20000130
 80009a0:	08009b90 	.word	0x08009b90
 80009a4:	08000e49 	.word	0x08000e49
 80009a8:	20000134 	.word	0x20000134

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2234      	movs	r2, #52	@ 0x34
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f006 fb70 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <SystemClock_Config+0xd4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a29      	ldr	r2, [pc, #164]	@ (8000a80 <SystemClock_Config+0xd4>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <SystemClock_Config+0xd4>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <SystemClock_Config+0xd8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f8:	4a22      	ldr	r2, [pc, #136]	@ (8000a84 <SystemClock_Config+0xd8>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2310      	movs	r3, #16
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a20:	2310      	movs	r3, #16
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fb9e 	bl	800317c <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a46:	f000 fa95 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	2102      	movs	r1, #2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 f80c 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a72:	f000 fa7f 	bl	8000f74 <Error_Handler>
  }
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	@ 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40007000 	.word	0x40007000

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f001 fa11 	bl	8001eec <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 fa50 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000094 	.word	0x20000094
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00061a80 	.word	0x00061a80

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f003 f86e 	bl	8003bfc <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 fa25 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000e8 	.word	0x200000e8
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b4e      	ldr	r3, [pc, #312]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a4d      	ldr	r2, [pc, #308]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b47      	ldr	r3, [pc, #284]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a46      	ldr	r2, [pc, #280]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b44      	ldr	r3, [pc, #272]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b40      	ldr	r3, [pc, #256]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a38      	ldr	r2, [pc, #224]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <MX_GPIO_Init+0x154>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000bc4:	4832      	ldr	r0, [pc, #200]	@ (8000c90 <MX_GPIO_Init+0x158>)
 8000bc6:	f001 f95d 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	21c0      	movs	r1, #192	@ 0xc0
 8000bce:	4830      	ldr	r0, [pc, #192]	@ (8000c90 <MX_GPIO_Init+0x158>)
 8000bd0:	f001 f958 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000bda:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x15c>)
 8000bdc:	f001 f952 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8000be0:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4825      	ldr	r0, [pc, #148]	@ (8000c90 <MX_GPIO_Init+0x158>)
 8000bfa:	f000 ff97 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bfe:	23c0      	movs	r3, #192	@ 0xc0
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <MX_GPIO_Init+0x158>)
 8000c16:	f000 ff89 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c1a:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4818      	ldr	r0, [pc, #96]	@ (8000c94 <MX_GPIO_Init+0x15c>)
 8000c34:	f000 ff7a 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_GPIO_Init+0x160>)
 8000c4c:	f000 ff6e 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000c50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	480a      	ldr	r0, [pc, #40]	@ (8000c90 <MX_GPIO_Init+0x158>)
 8000c66:	f000 ff61 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000c6a:	2340      	movs	r3, #64	@ 0x40
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_GPIO_Init+0x15c>)
 8000c7e:	f000 ff55 	bl	8001b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020800 	.word	0x40020800

08000c9c <setNStars>:

/* USER CODE BEGIN 4 */
void setNStars(char *str, int n) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < n; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	e007      	b.n	8000cbc <setNStars+0x20>
        str[i] = '*';
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	222a      	movs	r2, #42	@ 0x2a
 8000cb4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf3      	blt.n	8000cac <setNStars+0x10>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <StartKeypadTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartKeypadTask */
void StartKeypadTask(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        /* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
        key = Get_Key();
 8000cdc:	f7ff fc68 	bl	80005b0 <Get_Key>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8000e20 <StartKeypadTask+0x14c>)
 8000ce6:	701a      	strb	r2, [r3, #0]
        sprintf(hold, "%c", key);
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e20 <StartKeypadTask+0x14c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	494d      	ldr	r1, [pc, #308]	@ (8000e24 <StartKeypadTask+0x150>)
 8000cf0:	484d      	ldr	r0, [pc, #308]	@ (8000e28 <StartKeypadTask+0x154>)
 8000cf2:	f006 f9b5 	bl	8007060 <siprintf>
        code[codeIndex] = key;
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e2c <StartKeypadTask+0x158>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b48      	ldr	r3, [pc, #288]	@ (8000e20 <StartKeypadTask+0x14c>)
 8000cfe:	7819      	ldrb	r1, [r3, #0]
 8000d00:	4b4b      	ldr	r3, [pc, #300]	@ (8000e30 <StartKeypadTask+0x15c>)
 8000d02:	5499      	strb	r1, [r3, r2]

        // Save the code if the config mode is activated
        if (configMode == 1 && codeIndex > 4) {
 8000d04:	4b4b      	ldr	r3, [pc, #300]	@ (8000e34 <StartKeypadTask+0x160>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d12a      	bne.n	8000d62 <StartKeypadTask+0x8e>
 8000d0c:	4b47      	ldr	r3, [pc, #284]	@ (8000e2c <StartKeypadTask+0x158>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d926      	bls.n	8000d62 <StartKeypadTask+0x8e>
            configMode = 0;
 8000d14:	4b47      	ldr	r3, [pc, #284]	@ (8000e34 <StartKeypadTask+0x160>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < strlen(code); i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e00b      	b.n	8000d38 <StartKeypadTask+0x64>
                savedCode[i] = code[i];
 8000d20:	4a43      	ldr	r2, [pc, #268]	@ (8000e30 <StartKeypadTask+0x15c>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4413      	add	r3, r2
 8000d26:	7819      	ldrb	r1, [r3, #0]
 8000d28:	4a43      	ldr	r2, [pc, #268]	@ (8000e38 <StartKeypadTask+0x164>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	460a      	mov	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < strlen(code); i++) {
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	483d      	ldr	r0, [pc, #244]	@ (8000e30 <StartKeypadTask+0x15c>)
 8000d3a:	f7ff fa69 	bl	8000210 <strlen>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d8ec      	bhi.n	8000d20 <StartKeypadTask+0x4c>
            }
            codeIndex = 0;
 8000d46:	4b39      	ldr	r3, [pc, #228]	@ (8000e2c <StartKeypadTask+0x158>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2140      	movs	r1, #64	@ 0x40
 8000d50:	483a      	ldr	r0, [pc, #232]	@ (8000e3c <StartKeypadTask+0x168>)
 8000d52:	f001 f897 	bl	8001e84 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	4838      	ldr	r0, [pc, #224]	@ (8000e3c <StartKeypadTask+0x168>)
 8000d5c:	f001 f892 	bl	8001e84 <HAL_GPIO_WritePin>
 8000d60:	e04e      	b.n	8000e00 <StartKeypadTask+0x12c>
        } else if (configMode == 0 && codeIndex > 4) {
 8000d62:	4b34      	ldr	r3, [pc, #208]	@ (8000e34 <StartKeypadTask+0x160>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d144      	bne.n	8000df4 <StartKeypadTask+0x120>
 8000d6a:	4b30      	ldr	r3, [pc, #192]	@ (8000e2c <StartKeypadTask+0x158>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d940      	bls.n	8000df4 <StartKeypadTask+0x120>
            // Check if code is the same for each item in array
            uint8_t sameCode = 1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < strlen(code); i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	e00e      	b.n	8000d9a <StartKeypadTask+0xc6>
                if (code[i] != savedCode[i]) {
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e30 <StartKeypadTask+0x15c>)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	492c      	ldr	r1, [pc, #176]	@ (8000e38 <StartKeypadTask+0x164>)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	440b      	add	r3, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d001      	beq.n	8000d94 <StartKeypadTask+0xc0>
                    sameCode = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < strlen(code); i++) {
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4825      	ldr	r0, [pc, #148]	@ (8000e30 <StartKeypadTask+0x15c>)
 8000d9c:	f7ff fa38 	bl	8000210 <strlen>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8e9      	bhi.n	8000d7c <StartKeypadTask+0xa8>
                }
            }
            // If the code is the same arm/disarm system
            if (sameCode == 1) {
 8000da8:	7cfb      	ldrb	r3, [r7, #19]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d11e      	bne.n	8000dec <StartKeypadTask+0x118>
                if (armed == 1) {
 8000dae:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <StartKeypadTask+0x16c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d10d      	bne.n	8000dd2 <StartKeypadTask+0xfe>
                    armed = 0;
 8000db6:	4b22      	ldr	r3, [pc, #136]	@ (8000e40 <StartKeypadTask+0x16c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2140      	movs	r1, #64	@ 0x40
 8000dc0:	481e      	ldr	r0, [pc, #120]	@ (8000e3c <StartKeypadTask+0x168>)
 8000dc2:	f001 f85f 	bl	8001e84 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <StartKeypadTask+0x168>)
 8000dcc:	f001 f85a 	bl	8001e84 <HAL_GPIO_WritePin>
 8000dd0:	e00c      	b.n	8000dec <StartKeypadTask+0x118>
                } else {
                    armed = 1;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <StartKeypadTask+0x16c>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	4817      	ldr	r0, [pc, #92]	@ (8000e3c <StartKeypadTask+0x168>)
 8000dde:	f001 f851 	bl	8001e84 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2140      	movs	r1, #64	@ 0x40
 8000de6:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <StartKeypadTask+0x168>)
 8000de8:	f001 f84c 	bl	8001e84 <HAL_GPIO_WritePin>
                }
            }
            codeIndex = 0;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <StartKeypadTask+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
        } else if (configMode == 0 && codeIndex > 4) {
 8000df2:	e005      	b.n	8000e00 <StartKeypadTask+0x12c>
        } else {
            codeIndex = codeIndex + 1;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <StartKeypadTask+0x158>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <StartKeypadTask+0x158>)
 8000dfe:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Transmit(&huart2, (uint8_t *) hold, strlen(hold), 100);
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <StartKeypadTask+0x154>)
 8000e02:	f7ff fa05 	bl	8000210 <strlen>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	2364      	movs	r3, #100	@ 0x64
 8000e0c:	4906      	ldr	r1, [pc, #24]	@ (8000e28 <StartKeypadTask+0x154>)
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <StartKeypadTask+0x170>)
 8000e10:	f002 ff44 	bl	8003c9c <HAL_UART_Transmit>
        HAL_Delay(500);
 8000e14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e18:	f000 fd82 	bl	8001920 <HAL_Delay>
        key = Get_Key();
 8000e1c:	e75e      	b.n	8000cdc <StartKeypadTask+0x8>
 8000e1e:	bf00      	nop
 8000e20:	20000090 	.word	0x20000090
 8000e24:	08007a88 	.word	0x08007a88
 8000e28:	20000138 	.word	0x20000138
 8000e2c:	2000014c 	.word	0x2000014c
 8000e30:	2000013c 	.word	0x2000013c
 8000e34:	20000010 	.word	0x20000010
 8000e38:	20000144 	.word	0x20000144
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	2000014d 	.word	0x2000014d
 8000e44:	200000e8 	.word	0x200000e8

08000e48 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
    /* Infinite loop */
    for (;;) {
        if (codeIndex > 0) {
 8000e50:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <StartOledTask+0xe8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d038      	beq.n	8000eca <StartOledTask+0x82>
        	if (codeIndex == 1) {
 8000e58:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <StartOledTask+0xe8>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10a      	bne.n	8000e76 <StartOledTask+0x2e>
        		SSD1306_GotoXY(0, 30);
 8000e60:	211e      	movs	r1, #30
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f9f6 	bl	8001254 <SSD1306_GotoXY>
        		SSD1306_UpdateScreen();
 8000e68:	f000 f94e 	bl	8001108 <SSD1306_UpdateScreen>
        		SSD1306_Puts("           ", &Font_16x26, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4931      	ldr	r1, [pc, #196]	@ (8000f34 <StartOledTask+0xec>)
 8000e70:	4831      	ldr	r0, [pc, #196]	@ (8000f38 <StartOledTask+0xf0>)
 8000e72:	f000 fa83 	bl	800137c <SSD1306_Puts>
        	}
            char str[10] = "";
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	809a      	strh	r2, [r3, #4]
            char str2[8] = "";
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
            setNStars(str2, codeIndex);
 8000e8c:	4b28      	ldr	r3, [pc, #160]	@ (8000f30 <StartOledTask+0xe8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff feff 	bl	8000c9c <setNStars>
            snprintf(str, sizeof(str2), str2);
 8000e9e:	f107 0214 	add.w	r2, r7, #20
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f8a5 	bl	8006ff8 <sniprintf>
            SSD1306_GotoXY(0, 30);
 8000eae:	211e      	movs	r1, #30
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 f9cf 	bl	8001254 <SSD1306_GotoXY>
            SSD1306_UpdateScreen();
 8000eb6:	f000 f927 	bl	8001108 <SSD1306_UpdateScreen>
            SSD1306_Puts(str2, &Font_16x26, 1);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	491c      	ldr	r1, [pc, #112]	@ (8000f34 <StartOledTask+0xec>)
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fa5a 	bl	800137c <SSD1306_Puts>
 8000ec8:	e02a      	b.n	8000f20 <StartOledTask+0xd8>
        } else if (configMode == 0) {
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <StartOledTask+0xf4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d126      	bne.n	8000f20 <StartOledTask+0xd8>
            char str[10] = "";
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	809a      	strh	r2, [r3, #4]
            if (armed == 1) {
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <StartOledTask+0xf8>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d107      	bne.n	8000ef8 <StartOledTask+0xb0>
                snprintf(str, sizeof(str), "ARMED");
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4a15      	ldr	r2, [pc, #84]	@ (8000f44 <StartOledTask+0xfc>)
 8000eee:	210a      	movs	r1, #10
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 f881 	bl	8006ff8 <sniprintf>
 8000ef6:	e006      	b.n	8000f06 <StartOledTask+0xbe>
            } else {
                snprintf(str, sizeof(str), "NOT ARMED");
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <StartOledTask+0x100>)
 8000efe:	210a      	movs	r1, #10
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 f879 	bl	8006ff8 <sniprintf>
            }
            SSD1306_GotoXY(0, 30);
 8000f06:	211e      	movs	r1, #30
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f9a3 	bl	8001254 <SSD1306_GotoXY>
            SSD1306_UpdateScreen();
 8000f0e:	f000 f8fb 	bl	8001108 <SSD1306_UpdateScreen>
            SSD1306_Puts(str, &Font_11x18, 1);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2201      	movs	r2, #1
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <StartOledTask+0x104>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fa2e 	bl	800137c <SSD1306_Puts>
        }
        SSD1306_UpdateScreen();
 8000f20:	f000 f8f2 	bl	8001108 <SSD1306_UpdateScreen>
        osDelay(300);
 8000f24:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f28:	f003 fb94 	bl	8004654 <osDelay>
        if (codeIndex > 0) {
 8000f2c:	e790      	b.n	8000e50 <StartOledTask+0x8>
 8000f2e:	bf00      	nop
 8000f30:	2000014c 	.word	0x2000014c
 8000f34:	20000008 	.word	0x20000008
 8000f38:	08007a8c 	.word	0x08007a8c
 8000f3c:	20000010 	.word	0x20000010
 8000f40:	2000014d 	.word	0x2000014d
 8000f44:	08007a98 	.word	0x08007a98
 8000f48:	08007aa0 	.word	0x08007aa0
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f62:	f000 fcbd 	bl	80018e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40001000 	.word	0x40001000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <Error_Handler+0x8>

08000f80 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f86:	f000 fa1f 	bl	80013c8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f8a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2178      	movs	r1, #120	@ 0x78
 8000f92:	485b      	ldr	r0, [pc, #364]	@ (8001100 <SSD1306_Init+0x180>)
 8000f94:	f001 f9ec 	bl	8002370 <HAL_I2C_IsDeviceReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e0a9      	b.n	80010f6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000fa2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000fa6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa8:	e002      	b.n	8000fb0 <SSD1306_Init+0x30>
		p--;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fb6:	22ae      	movs	r2, #174	@ 0xae
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	@ 0x78
 8000fbc:	f000 fa80 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	@ 0x78
 8000fc6:	f000 fa7b 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fca:	2210      	movs	r2, #16
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	@ 0x78
 8000fd0:	f000 fa76 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fd4:	22b0      	movs	r2, #176	@ 0xb0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	@ 0x78
 8000fda:	f000 fa71 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fde:	22c8      	movs	r2, #200	@ 0xc8
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	@ 0x78
 8000fe4:	f000 fa6c 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	@ 0x78
 8000fee:	f000 fa67 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	@ 0x78
 8000ff8:	f000 fa62 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ffc:	2240      	movs	r2, #64	@ 0x40
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	@ 0x78
 8001002:	f000 fa5d 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001006:	2281      	movs	r2, #129	@ 0x81
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	@ 0x78
 800100c:	f000 fa58 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001010:	22ff      	movs	r2, #255	@ 0xff
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	@ 0x78
 8001016:	f000 fa53 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800101a:	22a1      	movs	r2, #161	@ 0xa1
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	@ 0x78
 8001020:	f000 fa4e 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001024:	22a6      	movs	r2, #166	@ 0xa6
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	@ 0x78
 800102a:	f000 fa49 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800102e:	22a8      	movs	r2, #168	@ 0xa8
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	@ 0x78
 8001034:	f000 fa44 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001038:	223f      	movs	r2, #63	@ 0x3f
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	@ 0x78
 800103e:	f000 fa3f 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001042:	22a4      	movs	r2, #164	@ 0xa4
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	@ 0x78
 8001048:	f000 fa3a 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800104c:	22d3      	movs	r2, #211	@ 0xd3
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	@ 0x78
 8001052:	f000 fa35 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	@ 0x78
 800105c:	f000 fa30 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001060:	22d5      	movs	r2, #213	@ 0xd5
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	@ 0x78
 8001066:	f000 fa2b 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800106a:	22f0      	movs	r2, #240	@ 0xf0
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	@ 0x78
 8001070:	f000 fa26 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001074:	22d9      	movs	r2, #217	@ 0xd9
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	@ 0x78
 800107a:	f000 fa21 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800107e:	2222      	movs	r2, #34	@ 0x22
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	@ 0x78
 8001084:	f000 fa1c 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001088:	22da      	movs	r2, #218	@ 0xda
 800108a:	2100      	movs	r1, #0
 800108c:	2078      	movs	r0, #120	@ 0x78
 800108e:	f000 fa17 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001092:	2212      	movs	r2, #18
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	@ 0x78
 8001098:	f000 fa12 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800109c:	22db      	movs	r2, #219	@ 0xdb
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	@ 0x78
 80010a2:	f000 fa0d 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	@ 0x78
 80010ac:	f000 fa08 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010b0:	228d      	movs	r2, #141	@ 0x8d
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	@ 0x78
 80010b6:	f000 fa03 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010ba:	2214      	movs	r2, #20
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	@ 0x78
 80010c0:	f000 f9fe 	bl	80014c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010c4:	22af      	movs	r2, #175	@ 0xaf
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	@ 0x78
 80010ca:	f000 f9f9 	bl	80014c0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ce:	222e      	movs	r2, #46	@ 0x2e
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	@ 0x78
 80010d4:	f000 f9f4 	bl	80014c0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 f843 	bl	8001164 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010de:	f000 f813 	bl	8001108 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <SSD1306_Init+0x184>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SSD1306_Init+0x184>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SSD1306_Init+0x184>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000094 	.word	0x20000094
 8001104:	20000550 	.word	0x20000550

08001108 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e01d      	b.n	8001150 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b50      	subs	r3, #80	@ 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	@ 0x78
 8001120:	f000 f9ce 	bl	80014c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	f000 f9c9 	bl	80014c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800112e:	2210      	movs	r2, #16
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 f9c4 	bl	80014c0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	4a08      	ldr	r2, [pc, #32]	@ (8001160 <SSD1306_UpdateScreen+0x58>)
 800113e:	441a      	add	r2, r3
 8001140:	2380      	movs	r3, #128	@ 0x80
 8001142:	2140      	movs	r1, #64	@ 0x40
 8001144:	2078      	movs	r0, #120	@ 0x78
 8001146:	f000 f955 	bl	80013f4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9de      	bls.n	8001114 <SSD1306_UpdateScreen+0xc>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000150 	.word	0x20000150

08001164 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <SSD1306_Fill+0x14>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <SSD1306_Fill+0x16>
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117e:	4619      	mov	r1, r3
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <SSD1306_Fill+0x2c>)
 8001182:	f005 ff8d 	bl	80070a0 <memset>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000150 	.word	0x20000150

08001194 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	70fb      	strb	r3, [r7, #3]
	if (
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80011aa:	d848      	bhi.n	800123e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80011b0:	d845      	bhi.n	800123e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <SSD1306_DrawPixel+0xb8>)
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11a      	bne.n	8001204 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	b298      	uxth	r0, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	4413      	add	r3, r2
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <SSD1306_DrawPixel+0xbc>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b259      	sxtb	r1, r3
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	4603      	mov	r3, r0
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	4413      	add	r3, r2
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <SSD1306_DrawPixel+0xbc>)
 8001200:	54d1      	strb	r1, [r2, r3]
 8001202:	e01d      	b.n	8001240 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	b298      	uxth	r0, r3
 800120c:	4603      	mov	r3, r0
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4413      	add	r3, r2
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <SSD1306_DrawPixel+0xbc>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	b25a      	sxtb	r2, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	4013      	ands	r3, r2
 800122c:	b259      	sxtb	r1, r3
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	4603      	mov	r3, r0
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	4413      	add	r3, r2
 8001236:	b2c9      	uxtb	r1, r1
 8001238:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SSD1306_DrawPixel+0xbc>)
 800123a:	54d1      	strb	r1, [r2, r3]
 800123c:	e000      	b.n	8001240 <SSD1306_DrawPixel+0xac>
		return;
 800123e:	bf00      	nop
	}
}
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000550 	.word	0x20000550
 8001250:	20000150 	.word	0x20000150

08001254 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	80fb      	strh	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <SSD1306_GotoXY+0x28>)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <SSD1306_GotoXY+0x28>)
 800126c:	88bb      	ldrh	r3, [r7, #4]
 800126e:	8053      	strh	r3, [r2, #2]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000550 	.word	0x20000550

08001280 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001290:	4b39      	ldr	r3, [pc, #228]	@ (8001378 <SSD1306_Putc+0xf8>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
	if (
 800129c:	2b7f      	cmp	r3, #127	@ 0x7f
 800129e:	dc07      	bgt.n	80012b0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <SSD1306_Putc+0xf8>)
 80012a2:	885b      	ldrh	r3, [r3, #2]
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ae:	dd01      	ble.n	80012b4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	e05d      	b.n	8001370 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e04b      	b.n	8001352 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	3b20      	subs	r3, #32
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	7849      	ldrb	r1, [r1, #1]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	440b      	add	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	e030      	b.n	8001340 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <SSD1306_Putc+0xf8>)
 80012f0:	881a      	ldrh	r2, [r3, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b298      	uxth	r0, r3
 80012fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <SSD1306_Putc+0xf8>)
 80012fc:	885a      	ldrh	r2, [r3, #2]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	79ba      	ldrb	r2, [r7, #6]
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff ff43 	bl	8001194 <SSD1306_DrawPixel>
 800130e:	e014      	b.n	800133a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <SSD1306_Putc+0xf8>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4413      	add	r3, r2
 800131a:	b298      	uxth	r0, r3
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <SSD1306_Putc+0xf8>)
 800131e:	885a      	ldrh	r2, [r3, #2]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b299      	uxth	r1, r3
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	f7ff ff2d 	bl	8001194 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3301      	adds	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4293      	cmp	r3, r2
 800134a:	d3c8      	bcc.n	80012de <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	461a      	mov	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4293      	cmp	r3, r2
 800135c:	d3ad      	bcc.n	80012ba <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <SSD1306_Putc+0xf8>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	7812      	ldrb	r2, [r2, #0]
 8001366:	4413      	add	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b03      	ldr	r3, [pc, #12]	@ (8001378 <SSD1306_Putc+0xf8>)
 800136c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800136e:	79fb      	ldrb	r3, [r7, #7]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000550 	.word	0x20000550

0800137c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800138a:	e012      	b.n	80013b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff73 	bl	8001280 <SSD1306_Putc>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	e008      	b.n	80013be <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e8      	bne.n	800138c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <ssd1306_I2C_Init+0x28>)
 80013d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013d2:	e002      	b.n	80013da <ssd1306_I2C_Init+0x12>
		p--;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f9      	bne.n	80013d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	0003d090 	.word	0x0003d090

080013f4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b0c7      	sub	sp, #284	@ 0x11c
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001402:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001406:	600a      	str	r2, [r1, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800140e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001412:	4622      	mov	r2, r4
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800141a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800141e:	4602      	mov	r2, r0
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001426:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800142a:	460a      	mov	r2, r1
 800142c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800142e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001432:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001436:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001448:	e015      	b.n	8001476 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800144a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800144e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001452:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	441a      	add	r2, r3
 800145a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800145e:	3301      	adds	r3, #1
 8001460:	7811      	ldrb	r1, [r2, #0]
 8001462:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001466:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800146a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800146c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001470:	3301      	adds	r3, #1
 8001472:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001476:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800147a:	b29b      	uxth	r3, r3
 800147c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001480:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d8df      	bhi.n	800144a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800148a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800148e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b299      	uxth	r1, r3
 8001496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800149a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	200a      	movs	r0, #10
 80014aa:	9000      	str	r0, [sp, #0]
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <ssd1306_I2C_WriteMulti+0xc8>)
 80014ae:	f000 fe61 	bl	8002174 <HAL_I2C_Master_Transmit>
}
 80014b2:	bf00      	nop
 80014b4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	20000094 	.word	0x20000094

080014c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	460b      	mov	r3, r1
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	4613      	mov	r3, r2
 80014d0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014d6:	797b      	ldrb	r3, [r7, #5]
 80014d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	b299      	uxth	r1, r3
 80014de:	f107 020c 	add.w	r2, r7, #12
 80014e2:	230a      	movs	r3, #10
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2302      	movs	r3, #2
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <ssd1306_I2C_Write+0x38>)
 80014ea:	f000 fe43 	bl	8002174 <HAL_I2C_Master_Transmit>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000094 	.word	0x20000094

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_MspInit+0x54>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_MspInit+0x54>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001510:	6453      	str	r3, [r2, #68]	@ 0x44
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <HAL_MspInit+0x54>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <HAL_MspInit+0x54>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_MspInit+0x54>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <HAL_MspInit+0x54>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	210f      	movs	r1, #15
 800153e:	f06f 0001 	mvn.w	r0, #1
 8001542:	f000 fac9 	bl	8001ad8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <HAL_I2C_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12c      	bne.n	80015d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001592:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a4:	2304      	movs	r3, #4
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <HAL_I2C_MspInit+0x8c>)
 80015b0:	f000 fabc 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 80015be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <HAL_I2C_MspInit+0x88>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	@ 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <HAL_UART_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12b      	bne.n	800165e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_UART_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_UART_MspInit+0x88>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_UART_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_UART_MspInit+0x88>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800163e:	230c      	movs	r3, #12
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164e:	2307      	movs	r3, #7
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <HAL_UART_MspInit+0x8c>)
 800165a:	f000 fa67 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	@ 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	@ 0x38
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <HAL_InitTick+0xe4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <HAL_InitTick+0xe4>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b30      	ldr	r3, [pc, #192]	@ (8001758 <HAL_InitTick+0xe4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a0:	f107 0210 	add.w	r2, r7, #16
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f001 fb04 	bl	8002cb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ba:	f001 fad5 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 80016be:	6378      	str	r0, [r7, #52]	@ 0x34
 80016c0:	e004      	b.n	80016cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016c2:	f001 fad1 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 80016c6:	4603      	mov	r3, r0
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ce:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_InitTick+0xe8>)
 80016d0:	fba2 2303 	umull	r2, r3, r2, r3
 80016d4:	0c9b      	lsrs	r3, r3, #18
 80016d6:	3b01      	subs	r3, #1
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <HAL_InitTick+0xec>)
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <HAL_InitTick+0xf0>)
 80016de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <HAL_InitTick+0xec>)
 80016e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <HAL_InitTick+0xec>)
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <HAL_InitTick+0xec>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_InitTick+0xec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_InitTick+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001700:	4817      	ldr	r0, [pc, #92]	@ (8001760 <HAL_InitTick+0xec>)
 8001702:	f001 ffd9 	bl	80036b8 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001710:	2b00      	cmp	r3, #0
 8001712:	d11b      	bne.n	800174c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001714:	4812      	ldr	r0, [pc, #72]	@ (8001760 <HAL_InitTick+0xec>)
 8001716:	f002 f829 	bl	800376c <HAL_TIM_Base_Start_IT>
 800171a:	4603      	mov	r3, r0
 800171c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001720:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001728:	2036      	movs	r0, #54	@ 0x36
 800172a:	f000 f9f1 	bl	8001b10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d808      	bhi.n	8001746 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	2036      	movs	r0, #54	@ 0x36
 800173a:	f000 f9cd 	bl	8001ad8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <HAL_InitTick+0xf4>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e002      	b.n	800174c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800174c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001750:	4618      	mov	r0, r3
 8001752:	3738      	adds	r7, #56	@ 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	431bde83 	.word	0x431bde83
 8001760:	20000558 	.word	0x20000558
 8001764:	40001000 	.word	0x40001000
 8001768:	20000018 	.word	0x20000018

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <NMI_Handler+0x4>

08001774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <MemManage_Handler+0x4>

08001784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <BusFault_Handler+0x4>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <UsageFault_Handler+0x4>

08001794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM6_DAC_IRQHandler+0x10>)
 80017aa:	f002 f84f 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000558 	.word	0x20000558

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f005 fcb8 	bl	800715c <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20020000 	.word	0x20020000
 8001818:	00000400 	.word	0x00000400
 800181c:	200005a0 	.word	0x200005a0
 8001820:	200050d8 	.word	0x200050d8

08001824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001876:	f005 fc77 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff f84d 	bl	8000918 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800188c:	08009c10 	.word	0x08009c10
  ldr r2, =_sbss
 8001890:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001894:	200050d8 	.word	0x200050d8

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f8fc 	bl	8001ac2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fed2 	bl	8001674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fe14 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	@ (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000001c 	.word	0x2000001c
 8001904:	200005a4 	.word	0x200005a4

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200005a4 	.word	0x200005a4

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	@ (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000001c 	.word	0x2000001c

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	@ (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	@ (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	@ (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	@ (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ff4c 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aea:	f7ff ff61 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001aee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f7ff ffb1 	bl	8001a5c <NVIC_EncodePriority>
 8001afa:	4602      	mov	r2, r0
 8001afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b00:	4611      	mov	r1, r2
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff80 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b08:	bf00      	nop
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff54 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	@ 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e165      	b.n	8001e14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8154 	bne.w	8001e0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d130      	bne.n	8001be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	2203      	movs	r2, #3
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d017      	beq.n	8001c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80ae 	beq.w	8001e0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	4a5c      	ldr	r2, [pc, #368]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a58      	ldr	r2, [pc, #352]	@ (8001e30 <HAL_GPIO_Init+0x304>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <HAL_GPIO_Init+0x308>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001e38 <HAL_GPIO_Init+0x30c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4d      	ldr	r2, [pc, #308]	@ (8001e3c <HAL_GPIO_Init+0x310>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e40 <HAL_GPIO_Init+0x314>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_GPIO_Init+0x318>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x20a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_GPIO_Init+0x31c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x206>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a49      	ldr	r2, [pc, #292]	@ (8001e4c <HAL_GPIO_Init+0x320>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x202>
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	e00c      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e00a      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e008      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d36:	2304      	movs	r3, #4
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e004      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e002      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x21c>
 8001d46:	2300      	movs	r3, #0
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	f002 0203 	and.w	r2, r2, #3
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	4093      	lsls	r3, r2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d58:	4935      	ldr	r1, [pc, #212]	@ (8001e30 <HAL_GPIO_Init+0x304>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a31      	ldr	r2, [pc, #196]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b2f      	ldr	r3, [pc, #188]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a26      	ldr	r2, [pc, #152]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dba:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dde:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e08:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <HAL_GPIO_Init+0x324>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3301      	adds	r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	f67f ae96 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40013800 	.word	0x40013800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	40020800 	.word	0x40020800
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40021400 	.word	0x40021400
 8001e4c:	40021800 	.word	0x40021800
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	619a      	str	r2, [r3, #24]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e12b      	b.n	8002156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d106      	bne.n	8001f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fb1e 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	@ 0x24
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f50:	f000 fe8a 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8001f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a81      	ldr	r2, [pc, #516]	@ (8002160 <HAL_I2C_Init+0x274>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d807      	bhi.n	8001f70 <HAL_I2C_Init+0x84>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a80      	ldr	r2, [pc, #512]	@ (8002164 <HAL_I2C_Init+0x278>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	bf94      	ite	ls
 8001f68:	2301      	movls	r3, #1
 8001f6a:	2300      	movhi	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e006      	b.n	8001f7e <HAL_I2C_Init+0x92>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a7d      	ldr	r2, [pc, #500]	@ (8002168 <HAL_I2C_Init+0x27c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf94      	ite	ls
 8001f78:	2301      	movls	r3, #1
 8001f7a:	2300      	movhi	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0e7      	b.n	8002156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a78      	ldr	r2, [pc, #480]	@ (800216c <HAL_I2C_Init+0x280>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9b      	lsrs	r3, r3, #18
 8001f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8002160 <HAL_I2C_Init+0x274>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d802      	bhi.n	8001fc0 <HAL_I2C_Init+0xd4>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	e009      	b.n	8001fd4 <HAL_I2C_Init+0xe8>
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	4a69      	ldr	r2, [pc, #420]	@ (8002170 <HAL_I2C_Init+0x284>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fe6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	495c      	ldr	r1, [pc, #368]	@ (8002160 <HAL_I2C_Init+0x274>)
 8001ff0:	428b      	cmp	r3, r1
 8001ff2:	d819      	bhi.n	8002028 <HAL_I2C_Init+0x13c>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e59      	subs	r1, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002008:	400b      	ands	r3, r1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_I2C_Init+0x138>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1e59      	subs	r1, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fbb1 f3f3 	udiv	r3, r1, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002022:	e051      	b.n	80020c8 <HAL_I2C_Init+0x1dc>
 8002024:	2304      	movs	r3, #4
 8002026:	e04f      	b.n	80020c8 <HAL_I2C_Init+0x1dc>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d111      	bne.n	8002054 <HAL_I2C_Init+0x168>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	e012      	b.n	800207a <HAL_I2C_Init+0x18e>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1e58      	subs	r0, r3, #1
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6859      	ldr	r1, [r3, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	0099      	lsls	r1, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Init+0x196>
 800207e:	2301      	movs	r3, #1
 8002080:	e022      	b.n	80020c8 <HAL_I2C_Init+0x1dc>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10e      	bne.n	80020a8 <HAL_I2C_Init+0x1bc>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1e58      	subs	r0, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6859      	ldr	r1, [r3, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	440b      	add	r3, r1
 8002098:	fbb0 f3f3 	udiv	r3, r0, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020a6:	e00f      	b.n	80020c8 <HAL_I2C_Init+0x1dc>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	0099      	lsls	r1, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	6809      	ldr	r1, [r1, #0]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6911      	ldr	r1, [r2, #16]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68d2      	ldr	r2, [r2, #12]
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	430b      	orrs	r3, r1
 800210a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	000186a0 	.word	0x000186a0
 8002164:	001e847f 	.word	0x001e847f
 8002168:	003d08ff 	.word	0x003d08ff
 800216c:	431bde83 	.word	0x431bde83
 8002170:	10624dd3 	.word	0x10624dd3

08002174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
 8002184:	4613      	mov	r3, r2
 8002186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff fbbe 	bl	8001908 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b20      	cmp	r3, #32
 8002198:	f040 80e0 	bne.w	800235c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2319      	movs	r3, #25
 80021a2:	2201      	movs	r2, #1
 80021a4:	4970      	ldr	r1, [pc, #448]	@ (8002368 <HAL_I2C_Master_Transmit+0x1f4>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa92 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0d3      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_I2C_Master_Transmit+0x50>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0cc      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d007      	beq.n	80021ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2221      	movs	r2, #33	@ 0x21
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2210      	movs	r2, #16
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a50      	ldr	r2, [pc, #320]	@ (800236c <HAL_I2C_Master_Transmit+0x1f8>)
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800222c:	8979      	ldrh	r1, [r7, #10]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f9ca 	bl	80025cc <I2C_MasterRequestWrite>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e08d      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002258:	e066      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fb50 	bl	8002904 <I2C_WaitOnTXEFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2b04      	cmp	r3, #4
 8002270:	d107      	bne.n	8002282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06b      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d11b      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x188>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d017      	beq.n	80022fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	6a39      	ldr	r1, [r7, #32]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fb47 	bl	8002994 <I2C_WaitOnBTFFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	2b04      	cmp	r3, #4
 8002312:	d107      	bne.n	8002324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e01a      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d194      	bne.n	800225a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800233e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	00100002 	.word	0x00100002
 800236c:	ffff0000 	.word	0xffff0000

08002370 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af02      	add	r7, sp, #8
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	460b      	mov	r3, r1
 800237e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fac2 	bl	8001908 <HAL_GetTick>
 8002384:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	f040 8111 	bne.w	80025ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2319      	movs	r3, #25
 800239e:	2201      	movs	r2, #1
 80023a0:	4988      	ldr	r1, [pc, #544]	@ (80025c4 <HAL_I2C_IsDeviceReady+0x254>)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f994 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
 80023b0:	e104      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_I2C_IsDeviceReady+0x50>
 80023bc:	2302      	movs	r3, #2
 80023be:	e0fd      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d007      	beq.n	80023e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0201 	orr.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2224      	movs	r2, #36	@ 0x24
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a70      	ldr	r2, [pc, #448]	@ (80025c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002408:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002418:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f952 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002440:	d103      	bne.n	800244a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0b6      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800245c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff fa53 	bl	8001908 <HAL_GetTick>
 8002462:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002492:	e025      	b.n	80024e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff fa38 	bl	8001908 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <HAL_I2C_IsDeviceReady+0x13a>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	22a0      	movs	r2, #160	@ 0xa0
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b02      	cmp	r3, #2
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80024ea:	d005      	beq.n	80024f8 <HAL_I2C_IsDeviceReady+0x188>
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_I2C_IsDeviceReady+0x188>
 80024f2:	7dbb      	ldrb	r3, [r7, #22]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0cd      	beq.n	8002494 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d129      	bne.n	8002562 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2319      	movs	r3, #25
 800253a:	2201      	movs	r2, #1
 800253c:	4921      	ldr	r1, [pc, #132]	@ (80025c4 <HAL_I2C_IsDeviceReady+0x254>)
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f8c6 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e036      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e02c      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002570:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800257a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2319      	movs	r3, #25
 8002582:	2201      	movs	r2, #1
 8002584:	490f      	ldr	r1, [pc, #60]	@ (80025c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f8a2 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e012      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3301      	adds	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	f4ff af32 	bcc.w	800240a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000

080025cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	607a      	str	r2, [r7, #4]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	460b      	mov	r3, r1
 80025da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d006      	beq.n	80025f6 <I2C_MasterRequestWrite+0x2a>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d003      	beq.n	80025f6 <I2C_MasterRequestWrite+0x2a>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025f4:	d108      	bne.n	8002608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e00b      	b.n	8002620 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	2b12      	cmp	r3, #18
 800260e:	d107      	bne.n	8002620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f84f 	bl	80026d0 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002646:	d103      	bne.n	8002650 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e035      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800265c:	d108      	bne.n	8002670 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e01b      	b.n	80026a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002670:	897b      	ldrh	r3, [r7, #10]
 8002672:	11db      	asrs	r3, r3, #7
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 0306 	and.w	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	f063 030f 	orn	r3, r3, #15
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	490e      	ldr	r1, [pc, #56]	@ (80026c8 <I2C_MasterRequestWrite+0xfc>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f898 	bl	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e010      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <I2C_MasterRequestWrite+0x100>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f888 	bl	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	00010008 	.word	0x00010008
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e0:	e048      	b.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d044      	beq.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff f90d 	bl	8001908 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d139      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10d      	bne.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x56>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	43da      	mvns	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	e00c      	b.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	43da      	mvns	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4013      	ands	r3, r2
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	461a      	mov	r2, r3
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	429a      	cmp	r2, r3
 8002744:	d116      	bne.n	8002774 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f043 0220 	orr.w	r2, r3, #32
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e023      	b.n	80027bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <I2C_WaitOnFlagUntilTimeout+0xca>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	43da      	mvns	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	4013      	ands	r3, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf0c      	ite	eq
 8002790:	2301      	moveq	r3, #1
 8002792:	2300      	movne	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	e00c      	b.n	80027b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d093      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d2:	e071      	b.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e2:	d123      	bne.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e067      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d041      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7ff f868 	bl	8001908 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d136      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e00b      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e021      	b.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	0c1b      	lsrs	r3, r3, #16
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10c      	bne.n	80028dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	43da      	mvns	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4013      	ands	r3, r2
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e00b      	b.n	80028f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f af6d 	bne.w	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002910:	e034      	b.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f886 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e034      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d028      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe ffed 	bl	8001908 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	d302      	bcc.n	8002940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d11d      	bne.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b80      	cmp	r3, #128	@ 0x80
 800294c:	d016      	beq.n	800297c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d1c3      	bne.n	8002912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029a0:	e034      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f83e 	bl	8002a24 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e034      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d028      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe ffa5 	bl	8001908 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d11d      	bne.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d016      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d1c3      	bne.n	80029a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a3a:	d11b      	bne.n	8002a74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0204 	orr.w	r2, r3, #4
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0cc      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b68      	ldr	r3, [pc, #416]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d90c      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b65      	ldr	r3, [pc, #404]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b63      	ldr	r3, [pc, #396]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0b8      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d020      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad8:	4b59      	ldr	r3, [pc, #356]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a58      	ldr	r2, [pc, #352]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af0:	4b53      	ldr	r3, [pc, #332]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a52      	ldr	r2, [pc, #328]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4b50      	ldr	r3, [pc, #320]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	494d      	ldr	r1, [pc, #308]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d044      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b47      	ldr	r3, [pc, #284]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e07f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e067      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b37      	ldr	r3, [pc, #220]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4934      	ldr	r1, [pc, #208]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fec8 	bl	8001908 <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fec4 	bl	8001908 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e04f      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b20      	ldr	r3, [pc, #128]	@ (8002c3c <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e032      	b.n	8002c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4916      	ldr	r1, [pc, #88]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b12      	ldr	r3, [pc, #72]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490e      	ldr	r1, [pc, #56]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f887 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490a      	ldr	r1, [pc, #40]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe fd22 	bl	8001674 <HAL_InitTick>

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023c00 	.word	0x40023c00
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08009bb4 	.word	0x08009bb4
 8002c48:	20000014 	.word	0x20000014
 8002c4c:	20000018 	.word	0x20000018

08002c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c54:	4b03      	ldr	r3, [pc, #12]	@ (8002c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	20000014 	.word	0x20000014

08002c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c6c:	f7ff fff0 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0a9b      	lsrs	r3, r3, #10
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	@ (8002c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08009bc4 	.word	0x08009bc4

08002c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c94:	f7ff ffdc 	bl	8002c50 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0b5b      	lsrs	r3, r3, #13
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4903      	ldr	r1, [pc, #12]	@ (8002cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	08009bc4 	.word	0x08009bc4

08002cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCC_GetClockConfig+0x5c>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_RCC_GetClockConfig+0x60>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b0ae      	sub	sp, #184	@ 0xb8
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d42:	4bcb      	ldr	r3, [pc, #812]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	f200 8206 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x440>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	0800315d 	.word	0x0800315d
 8002d60:	0800315d 	.word	0x0800315d
 8002d64:	0800315d 	.word	0x0800315d
 8002d68:	08002d95 	.word	0x08002d95
 8002d6c:	0800315d 	.word	0x0800315d
 8002d70:	0800315d 	.word	0x0800315d
 8002d74:	0800315d 	.word	0x0800315d
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	0800315d 	.word	0x0800315d
 8002d80:	0800315d 	.word	0x0800315d
 8002d84:	0800315d 	.word	0x0800315d
 8002d88:	08002f8d 	.word	0x08002f8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4bb9      	ldr	r3, [pc, #740]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002d92:	e1e7      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4bb8      	ldr	r3, [pc, #736]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d9a:	e1e3      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9c:	4bb4      	ldr	r3, [pc, #720]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da8:	4bb1      	ldr	r3, [pc, #708]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d071      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4bae      	ldr	r3, [pc, #696]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dc0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dec:	0150      	lsls	r0, r2, #5
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4621      	mov	r1, r4
 8002df4:	1a51      	subs	r1, r2, r1
 8002df6:	6439      	str	r1, [r7, #64]	@ 0x40
 8002df8:	4629      	mov	r1, r5
 8002dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e16:	4641      	mov	r1, r8
 8002e18:	018a      	lsls	r2, r1, #6
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e20:	4649      	mov	r1, r9
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002e34:	4649      	mov	r1, r9
 8002e36:	00cb      	lsls	r3, r1, #3
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3e:	4641      	mov	r1, r8
 8002e40:	00ca      	lsls	r2, r1, #3
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	4622      	mov	r2, r4
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e4e:	462b      	mov	r3, r5
 8002e50:	460a      	mov	r2, r1
 8002e52:	eb42 0303 	adc.w	r3, r2, r3
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e64:	4629      	mov	r1, r5
 8002e66:	024b      	lsls	r3, r1, #9
 8002e68:	4621      	mov	r1, r4
 8002e6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6e:	4621      	mov	r1, r4
 8002e70:	024a      	lsls	r2, r1, #9
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e88:	f7fd fa1a 	bl	80002c0 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e96:	e067      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e98:	4b75      	ldr	r3, [pc, #468]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ea4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002eb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	0159      	lsls	r1, r3, #5
 8002ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ecc:	0150      	lsls	r0, r2, #5
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	1a51      	subs	r1, r2, r1
 8002ed6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002ed8:	4629      	mov	r1, r5
 8002eda:	eb63 0301 	sbc.w	r3, r3, r1
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002eec:	4649      	mov	r1, r9
 8002eee:	018b      	lsls	r3, r1, #6
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	018a      	lsls	r2, r1, #6
 8002efa:	4641      	mov	r1, r8
 8002efc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f00:	4649      	mov	r1, r9
 8002f02:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1a:	4692      	mov	sl, r2
 8002f1c:	469b      	mov	fp, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	eb1a 0303 	adds.w	r3, sl, r3
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	462b      	mov	r3, r5
 8002f28:	eb4b 0303 	adc.w	r3, fp, r3
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f50:	2200      	movs	r2, #0
 8002f52:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f54:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002f5a:	f7fd f9b1 	bl	80002c0 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4613      	mov	r3, r2
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f68:	4b41      	ldr	r3, [pc, #260]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f8a:	e0eb      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f98:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d06b      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa4:	4b32      	ldr	r3, [pc, #200]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	2200      	movs	r2, #0
 8002fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fb8:	2300      	movs	r3, #0
 8002fba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	0159      	lsls	r1, r3, #5
 8002fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd2:	0150      	lsls	r0, r2, #5
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4621      	mov	r1, r4
 8002fda:	1a51      	subs	r1, r2, r1
 8002fdc:	61b9      	str	r1, [r7, #24]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	018b      	lsls	r3, r1, #6
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	018a      	lsls	r2, r1, #6
 8003000:	4651      	mov	r1, sl
 8003002:	ebb2 0801 	subs.w	r8, r2, r1
 8003006:	4659      	mov	r1, fp
 8003008:	eb63 0901 	sbc.w	r9, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003018:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003020:	4690      	mov	r8, r2
 8003022:	4699      	mov	r9, r3
 8003024:	4623      	mov	r3, r4
 8003026:	eb18 0303 	adds.w	r3, r8, r3
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	462b      	mov	r3, r5
 800302e:	eb49 0303 	adc.w	r3, r9, r3
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003040:	4629      	mov	r1, r5
 8003042:	024b      	lsls	r3, r1, #9
 8003044:	4621      	mov	r1, r4
 8003046:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304a:	4621      	mov	r1, r4
 800304c:	024a      	lsls	r2, r1, #9
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003056:	2200      	movs	r2, #0
 8003058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800305a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800305c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003060:	f7fd f92e 	bl	80002c0 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800306e:	e065      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x420>
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b3d      	ldr	r3, [pc, #244]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x458>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	2200      	movs	r2, #0
 8003084:	4618      	mov	r0, r3
 8003086:	4611      	mov	r1, r2
 8003088:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800308c:	653b      	str	r3, [r7, #80]	@ 0x50
 800308e:	2300      	movs	r3, #0
 8003090:	657b      	str	r3, [r7, #84]	@ 0x54
 8003092:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4641      	mov	r1, r8
 80030b0:	1a51      	subs	r1, r2, r1
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	4649      	mov	r1, r9
 80030b6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030c8:	4659      	mov	r1, fp
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d2:	4651      	mov	r1, sl
 80030d4:	018a      	lsls	r2, r1, #6
 80030d6:	4651      	mov	r1, sl
 80030d8:	1a54      	subs	r4, r2, r1
 80030da:	4659      	mov	r1, fp
 80030dc:	eb63 0501 	sbc.w	r5, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	464b      	mov	r3, r9
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003124:	2200      	movs	r2, #0
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003128:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800312a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800312e:	f7fd f8c7 	bl	80002c0 <__aeabi_uldivmod>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4613      	mov	r3, r2
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800313c:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x458>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0f1b      	lsrs	r3, r3, #28
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800314a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800314e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800315a:	e003      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x45c>)
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003168:	4618      	mov	r0, r3
 800316a:	37b8      	adds	r7, #184	@ 0xb8
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400

0800317c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e28d      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8083 	beq.w	80032a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800319c:	4b94      	ldr	r3, [pc, #592]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d019      	beq.n	80031dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a8:	4b91      	ldr	r3, [pc, #580]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031b4:	4b8e      	ldr	r3, [pc, #568]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031c0:	d00c      	beq.n	80031dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b8b      	ldr	r3, [pc, #556]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d112      	bne.n	80031f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ce:	4b88      	ldr	r3, [pc, #544]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031da:	d10b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b84      	ldr	r3, [pc, #528]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d05b      	beq.n	80032a0 <HAL_RCC_OscConfig+0x124>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d157      	bne.n	80032a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e25a      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x90>
 80031fe:	4b7c      	ldr	r3, [pc, #496]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7b      	ldr	r2, [pc, #492]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e01d      	b.n	8003248 <HAL_RCC_OscConfig+0xcc>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0xb4>
 8003216:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a75      	ldr	r2, [pc, #468]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b73      	ldr	r3, [pc, #460]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a72      	ldr	r2, [pc, #456]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0xcc>
 8003230:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b6c      	ldr	r3, [pc, #432]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6b      	ldr	r2, [pc, #428]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fb5a 	bl	8001908 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fb56 	bl	8001908 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	@ 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e21f      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b61      	ldr	r3, [pc, #388]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0xdc>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fb46 	bl	8001908 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fb42 	bl	8001908 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	@ 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e20b      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	4b57      	ldr	r3, [pc, #348]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x104>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06f      	beq.n	800338e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032ae:	4b50      	ldr	r3, [pc, #320]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d017      	beq.n	80032ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ba:	4b4d      	ldr	r3, [pc, #308]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d105      	bne.n	80032d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c6:	4b4a      	ldr	r3, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b44      	ldr	r3, [pc, #272]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x186>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1d3      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4937      	ldr	r1, [pc, #220]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe faef 	bl	8001908 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe faeb 	bl	8001908 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1b4      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b28      	ldr	r3, [pc, #160]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4925      	ldr	r1, [pc, #148]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_RCC_OscConfig+0x278>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe face 	bl	8001908 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe faca 	bl	8001908 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e193      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d036      	beq.n	8003408 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe faae 	bl	8001908 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe faaa 	bl	8001908 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e173      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80033c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x234>
 80033ce:	e01b      	b.n	8003408 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fa97 	bl	8001908 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	e00e      	b.n	80033fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033de:	f7fe fa93 	bl	8001908 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d907      	bls.n	80033fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e15c      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470000 	.word	0x42470000
 80033f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ea      	bne.n	80033de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8097 	beq.w	8003544 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b83      	ldr	r3, [pc, #524]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b7f      	ldr	r3, [pc, #508]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a7e      	ldr	r2, [pc, #504]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
 8003436:	4b7c      	ldr	r3, [pc, #496]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b79      	ldr	r3, [pc, #484]	@ (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b76      	ldr	r3, [pc, #472]	@ (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	@ (800362c <HAL_RCC_OscConfig+0x4b0>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe fa53 	bl	8001908 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe fa4f 	bl	8001908 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e118      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b6c      	ldr	r3, [pc, #432]	@ (800362c <HAL_RCC_OscConfig+0x4b0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x31e>
 800348c:	4b66      	ldr	r3, [pc, #408]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a65      	ldr	r2, [pc, #404]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x358>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x340>
 80034a2:	4b61      	ldr	r3, [pc, #388]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	4a60      	ldr	r2, [pc, #384]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x358>
 80034bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a59      	ldr	r2, [pc, #356]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	4b57      	ldr	r3, [pc, #348]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a56      	ldr	r2, [pc, #344]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe fa14 	bl	8001908 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fe fa10 	bl	8001908 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0d7      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCC_OscConfig+0x368>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003508:	f7fe f9fe 	bl	8001908 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe f9fa 	bl	8001908 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0c1      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	4b40      	ldr	r3, [pc, #256]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ee      	bne.n	8003510 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	4a3a      	ldr	r2, [pc, #232]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80ad 	beq.w	80036a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354e:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d060      	beq.n	800361c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d145      	bne.n	80035ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b33      	ldr	r3, [pc, #204]	@ (8003630 <HAL_RCC_OscConfig+0x4b4>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe f9ce 	bl	8001908 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe f9ca 	bl	8001908 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e093      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b29      	ldr	r3, [pc, #164]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	071b      	lsls	r3, r3, #28
 80035ba:	491b      	ldr	r1, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x4b4>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fe f99f 	bl	8001908 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fe f99b 	bl	8001908 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e064      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	4b11      	ldr	r3, [pc, #68]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x452>
 80035ec:	e05c      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_RCC_OscConfig+0x4b4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f988 	bl	8001908 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fe f984 	bl	8001908 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e04d      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x480>
 800361a:	e045      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e040      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
 8003628:	40023800 	.word	0x40023800
 800362c:	40007000 	.word	0x40007000
 8003630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003634:	4b1f      	ldr	r3, [pc, #124]	@ (80036b4 <HAL_RCC_OscConfig+0x538>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d030      	beq.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d129      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d122      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800366a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	4293      	cmp	r3, r2
 800366e:	d119      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d10f      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d107      	bne.n	80036a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e041      	b.n	800374e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f839 	bl	8003756 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 f9c0 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04e      	b.n	8003822 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a23      	ldr	r2, [pc, #140]	@ (8003830 <HAL_TIM_Base_Start_IT+0xc4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d022      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ae:	d01d      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d018      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_TIM_Base_Start_IT+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_TIM_Base_Start_IT+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d111      	bne.n	8003810 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d010      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	e007      	b.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40010400 	.word	0x40010400
 8003844:	40014000 	.word	0x40014000
 8003848:	40001800 	.word	0x40001800

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8d2 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8c4 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8d5 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d020      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8ac 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f89e 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8af 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f886 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f878 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f889 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f860 	bl	8003a40 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f852 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f863 	bl	8003a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd facc 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f906 	bl	8003be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f834 	bl	8003a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0220 	mvn.w	r2, #32
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8d8 	bl	8003bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a43      	ldr	r2, [pc, #268]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a35      	ldr	r2, [pc, #212]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d027      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d023      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <TIM_Base_SetConfig+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc0 <TIM_Base_SetConfig+0x144>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc4 <TIM_Base_SetConfig+0x148>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <TIM_Base_SetConfig+0x14c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <TIM_Base_SetConfig+0x150>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <TIM_Base_SetConfig+0x154>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0xf8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	611a      	str	r2, [r3, #16]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	40001800 	.word	0x40001800
 8003bcc:	40001c00 	.word	0x40001c00
 8003bd0:	40002000 	.word	0x40002000

08003bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fcde 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	@ 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f973 	bl	8003f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	@ 0x28
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d175      	bne.n	8003da8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_UART_Transmit+0x2c>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e06e      	b.n	8003daa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	@ 0x21
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fe15 	bl	8001908 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf4:	d108      	bne.n	8003d08 <HAL_UART_Transmit+0x6c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e003      	b.n	8003d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d10:	e02e      	b.n	8003d70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2180      	movs	r1, #128	@ 0x80
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f848 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e03a      	b.n	8003daa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	e007      	b.n	8003d62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cb      	bne.n	8003d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	@ 0x40
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f814 	bl	8003db2 <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	e000      	b.n	8003daa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003da8:	2302      	movs	r3, #2
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	e03b      	b.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d037      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7fd fd9c 	bl	8001908 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e03a      	b.n	8003e5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d020      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d01d      	beq.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d116      	bne.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f81d 	bl	8003e64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00f      	b.n	8003e5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d0b4      	beq.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b095      	sub	sp, #84	@ 0x54
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e5      	bne.n	8003ea0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d119      	bne.n	8003f10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f023 0310 	bic.w	r3, r3, #16
 8003ef2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003efc:	61ba      	str	r2, [r7, #24]
 8003efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6979      	ldr	r1, [r7, #20]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e5      	bne.n	8003edc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f1e:	bf00      	nop
 8003f20:	3754      	adds	r7, #84	@ 0x54
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b0c0      	sub	sp, #256	@ 0x100
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	68d9      	ldr	r1, [r3, #12]
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	ea40 0301 	orr.w	r3, r0, r1
 8003f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f84:	f021 010c 	bic.w	r1, r1, #12
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f92:	430b      	orrs	r3, r1
 8003f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa6:	6999      	ldr	r1, [r3, #24]
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	ea40 0301 	orr.w	r3, r0, r1
 8003fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b8f      	ldr	r3, [pc, #572]	@ (80041f8 <UART_SetConfig+0x2cc>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d005      	beq.n	8003fcc <UART_SetConfig+0xa0>
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80041fc <UART_SetConfig+0x2d0>)
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d104      	bne.n	8003fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fcc:	f7fe fe60 	bl	8002c90 <HAL_RCC_GetPCLK2Freq>
 8003fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fd4:	e003      	b.n	8003fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd6:	f7fe fe47 	bl	8002c68 <HAL_RCC_GetPCLK1Freq>
 8003fda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe8:	f040 810c 	bne.w	8004204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ffe:	4622      	mov	r2, r4
 8004000:	462b      	mov	r3, r5
 8004002:	1891      	adds	r1, r2, r2
 8004004:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004006:	415b      	adcs	r3, r3
 8004008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800400a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800400e:	4621      	mov	r1, r4
 8004010:	eb12 0801 	adds.w	r8, r2, r1
 8004014:	4629      	mov	r1, r5
 8004016:	eb43 0901 	adc.w	r9, r3, r1
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800402e:	4690      	mov	r8, r2
 8004030:	4699      	mov	r9, r3
 8004032:	4623      	mov	r3, r4
 8004034:	eb18 0303 	adds.w	r3, r8, r3
 8004038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800403c:	462b      	mov	r3, r5
 800403e:	eb49 0303 	adc.w	r3, r9, r3
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004052:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800405a:	460b      	mov	r3, r1
 800405c:	18db      	adds	r3, r3, r3
 800405e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004060:	4613      	mov	r3, r2
 8004062:	eb42 0303 	adc.w	r3, r2, r3
 8004066:	657b      	str	r3, [r7, #84]	@ 0x54
 8004068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800406c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004070:	f7fc f926 	bl	80002c0 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b61      	ldr	r3, [pc, #388]	@ (8004200 <UART_SetConfig+0x2d4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800408c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800409c:	415b      	adcs	r3, r3
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040a4:	4641      	mov	r1, r8
 80040a6:	eb12 0a01 	adds.w	sl, r2, r1
 80040aa:	4649      	mov	r1, r9
 80040ac:	eb43 0b01 	adc.w	fp, r3, r1
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040c4:	4692      	mov	sl, r2
 80040c6:	469b      	mov	fp, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	eb1a 0303 	adds.w	r3, sl, r3
 80040ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d2:	464b      	mov	r3, r9
 80040d4:	eb4b 0303 	adc.w	r3, fp, r3
 80040d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040f0:	460b      	mov	r3, r1
 80040f2:	18db      	adds	r3, r3, r3
 80040f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040f6:	4613      	mov	r3, r2
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004106:	f7fc f8db 	bl	80002c0 <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4611      	mov	r1, r2
 8004110:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <UART_SetConfig+0x2d4>)
 8004112:	fba3 2301 	umull	r2, r3, r3, r1
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2264      	movs	r2, #100	@ 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	1acb      	subs	r3, r1, r3
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004126:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <UART_SetConfig+0x2d4>)
 8004128:	fba3 2302 	umull	r2, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004134:	441c      	add	r4, r3
 8004136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004140:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004150:	415b      	adcs	r3, r3
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6339      	str	r1, [r7, #48]	@ 0x30
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041ac:	460b      	mov	r3, r1
 80041ae:	18db      	adds	r3, r3, r3
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041b2:	4613      	mov	r3, r2
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041c2:	f7fc f87d 	bl	80002c0 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004200 <UART_SetConfig+0x2d4>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	@ 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3332      	adds	r3, #50	@ 0x32
 80041de:	4a08      	ldr	r2, [pc, #32]	@ (8004200 <UART_SetConfig+0x2d4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 0207 	and.w	r2, r3, #7
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4422      	add	r2, r4
 80041f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f4:	e106      	b.n	8004404 <UART_SetConfig+0x4d8>
 80041f6:	bf00      	nop
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800420e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004216:	4642      	mov	r2, r8
 8004218:	464b      	mov	r3, r9
 800421a:	1891      	adds	r1, r2, r2
 800421c:	6239      	str	r1, [r7, #32]
 800421e:	415b      	adcs	r3, r3
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
 8004222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004226:	4641      	mov	r1, r8
 8004228:	1854      	adds	r4, r2, r1
 800422a:	4649      	mov	r1, r9
 800422c:	eb43 0501 	adc.w	r5, r3, r1
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	00eb      	lsls	r3, r5, #3
 800423a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423e:	00e2      	lsls	r2, r4, #3
 8004240:	4614      	mov	r4, r2
 8004242:	461d      	mov	r5, r3
 8004244:	4643      	mov	r3, r8
 8004246:	18e3      	adds	r3, r4, r3
 8004248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800424c:	464b      	mov	r3, r9
 800424e:	eb45 0303 	adc.w	r3, r5, r3
 8004252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004272:	4629      	mov	r1, r5
 8004274:	008b      	lsls	r3, r1, #2
 8004276:	4621      	mov	r1, r4
 8004278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800427c:	4621      	mov	r1, r4
 800427e:	008a      	lsls	r2, r1, #2
 8004280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004284:	f7fc f81c 	bl	80002c0 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b60      	ldr	r3, [pc, #384]	@ (8004410 <UART_SetConfig+0x4e4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	011c      	lsls	r4, r3, #4
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	61b9      	str	r1, [r7, #24]
 80042b0:	415b      	adcs	r3, r3
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b8:	4641      	mov	r1, r8
 80042ba:	1851      	adds	r1, r2, r1
 80042bc:	6139      	str	r1, [r7, #16]
 80042be:	4649      	mov	r1, r9
 80042c0:	414b      	adcs	r3, r1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d0:	4659      	mov	r1, fp
 80042d2:	00cb      	lsls	r3, r1, #3
 80042d4:	4651      	mov	r1, sl
 80042d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042da:	4651      	mov	r1, sl
 80042dc:	00ca      	lsls	r2, r1, #3
 80042de:	4610      	mov	r0, r2
 80042e0:	4619      	mov	r1, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	4642      	mov	r2, r8
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042ec:	464b      	mov	r3, r9
 80042ee:	460a      	mov	r2, r1
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004302:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004310:	4649      	mov	r1, r9
 8004312:	008b      	lsls	r3, r1, #2
 8004314:	4641      	mov	r1, r8
 8004316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431a:	4641      	mov	r1, r8
 800431c:	008a      	lsls	r2, r1, #2
 800431e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004322:	f7fb ffcd 	bl	80002c0 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4611      	mov	r1, r2
 800432c:	4b38      	ldr	r3, [pc, #224]	@ (8004410 <UART_SetConfig+0x4e4>)
 800432e:	fba3 2301 	umull	r2, r3, r3, r1
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2264      	movs	r2, #100	@ 0x64
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	1acb      	subs	r3, r1, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	@ 0x32
 8004340:	4a33      	ldr	r2, [pc, #204]	@ (8004410 <UART_SetConfig+0x4e4>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	673b      	str	r3, [r7, #112]	@ 0x70
 8004356:	677a      	str	r2, [r7, #116]	@ 0x74
 8004358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	415b      	adcs	r3, r3
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	607b      	str	r3, [r7, #4]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800439e:	464b      	mov	r3, r9
 80043a0:	460a      	mov	r2, r1
 80043a2:	eb42 0303 	adc.w	r3, r2, r3
 80043a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043c0:	4649      	mov	r1, r9
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	4641      	mov	r1, r8
 80043c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ca:	4641      	mov	r1, r8
 80043cc:	008a      	lsls	r2, r1, #2
 80043ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043d2:	f7fb ff75 	bl	80002c0 <__aeabi_uldivmod>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4b0d      	ldr	r3, [pc, #52]	@ (8004410 <UART_SetConfig+0x4e4>)
 80043dc:	fba3 1302 	umull	r1, r3, r3, r2
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	2164      	movs	r1, #100	@ 0x64
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3332      	adds	r3, #50	@ 0x32
 80043ee:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <UART_SetConfig+0x4e4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 020f 	and.w	r2, r3, #15
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4422      	add	r2, r4
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800440a:	46bd      	mov	sp, r7
 800440c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004410:	51eb851f 	.word	0x51eb851f

08004414 <__NVIC_SetPriority>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	6039      	str	r1, [r7, #0]
 800441e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db0a      	blt.n	800443e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	490c      	ldr	r1, [pc, #48]	@ (8004460 <__NVIC_SetPriority+0x4c>)
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	440b      	add	r3, r1
 8004438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800443c:	e00a      	b.n	8004454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4908      	ldr	r1, [pc, #32]	@ (8004464 <__NVIC_SetPriority+0x50>)
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	3b04      	subs	r3, #4
 800444c:	0112      	lsls	r2, r2, #4
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	440b      	add	r3, r1
 8004452:	761a      	strb	r2, [r3, #24]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000e100 	.word	0xe000e100
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800446c:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <SysTick_Handler+0x1c>)
 800446e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004470:	f001 fd46 	bl	8005f00 <xTaskGetSchedulerState>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800447a:	f002 fb3d 	bl	8006af8 <xPortSysTickHandler>
  }
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000e010 	.word	0xe000e010

08004488 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800448c:	2100      	movs	r1, #0
 800448e:	f06f 0004 	mvn.w	r0, #4
 8004492:	f7ff ffbf 	bl	8004414 <__NVIC_SetPriority>
#endif
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	603b      	str	r3, [r7, #0]
  return(result);
 80044a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044ae:	f06f 0305 	mvn.w	r3, #5
 80044b2:	607b      	str	r3, [r7, #4]
 80044b4:	e00c      	b.n	80044d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044b6:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <osKernelInitialize+0x44>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044be:	4b08      	ldr	r3, [pc, #32]	@ (80044e0 <osKernelInitialize+0x44>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	e002      	b.n	80044d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044ca:	f04f 33ff 	mov.w	r3, #4294967295
 80044ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044d0:	687b      	ldr	r3, [r7, #4]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200005a8 	.word	0x200005a8

080044e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ea:	f3ef 8305 	mrs	r3, IPSR
 80044ee:	603b      	str	r3, [r7, #0]
  return(result);
 80044f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80044f6:	f06f 0305 	mvn.w	r3, #5
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	e010      	b.n	8004520 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044fe:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <osKernelStart+0x48>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d109      	bne.n	800451a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004506:	f7ff ffbf 	bl	8004488 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800450a:	4b08      	ldr	r3, [pc, #32]	@ (800452c <osKernelStart+0x48>)
 800450c:	2202      	movs	r2, #2
 800450e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004510:	f001 f892 	bl	8005638 <vTaskStartScheduler>
      stat = osOK;
 8004514:	2300      	movs	r3, #0
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	e002      	b.n	8004520 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004520:	687b      	ldr	r3, [r7, #4]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200005a8 	.word	0x200005a8

08004530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	@ 0x38
 8004534:	af04      	add	r7, sp, #16
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004540:	f3ef 8305 	mrs	r3, IPSR
 8004544:	617b      	str	r3, [r7, #20]
  return(result);
 8004546:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004548:	2b00      	cmp	r3, #0
 800454a:	d17e      	bne.n	800464a <osThreadNew+0x11a>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d07b      	beq.n	800464a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004552:	2380      	movs	r3, #128	@ 0x80
 8004554:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004556:	2318      	movs	r3, #24
 8004558:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d045      	beq.n	80045f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <osThreadNew+0x48>
        name = attr->name;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <osThreadNew+0x6e>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b38      	cmp	r3, #56	@ 0x38
 8004590:	d805      	bhi.n	800459e <osThreadNew+0x6e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <osThreadNew+0x72>
        return (NULL);
 800459e:	2300      	movs	r3, #0
 80045a0:	e054      	b.n	800464c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <osThreadNew+0xa8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2ba7      	cmp	r3, #167	@ 0xa7
 80045c0:	d90a      	bls.n	80045d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <osThreadNew+0xa8>
        mem = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
 80045d6:	e010      	b.n	80045fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10c      	bne.n	80045fa <osThreadNew+0xca>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d108      	bne.n	80045fa <osThreadNew+0xca>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <osThreadNew+0xca>
          mem = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	e001      	b.n	80045fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d110      	bne.n	8004622 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004608:	9202      	str	r2, [sp, #8]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fe1a 	bl	8005250 <xTaskCreateStatic>
 800461c:	4603      	mov	r3, r0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e013      	b.n	800464a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d110      	bne.n	800464a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	b29a      	uxth	r2, r3
 800462c:	f107 0310 	add.w	r3, r7, #16
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fe68 	bl	8005310 <xTaskCreate>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <osThreadNew+0x11a>
            hTask = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800464a:	693b      	ldr	r3, [r7, #16]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3728      	adds	r7, #40	@ 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465c:	f3ef 8305 	mrs	r3, IPSR
 8004660:	60bb      	str	r3, [r7, #8]
  return(result);
 8004662:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <osDelay+0x1c>
    stat = osErrorISR;
 8004668:	f06f 0305 	mvn.w	r3, #5
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e007      	b.n	8004680 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <osDelay+0x2c>
      vTaskDelay(ticks);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ffa6 	bl	80055cc <vTaskDelay>
    }
  }

  return (stat);
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a07      	ldr	r2, [pc, #28]	@ (80046b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800469c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a06      	ldr	r2, [pc, #24]	@ (80046bc <vApplicationGetIdleTaskMemory+0x30>)
 80046a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	@ 0x80
 80046a8:	601a      	str	r2, [r3, #0]
}
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	200005ac 	.word	0x200005ac
 80046bc:	20000654 	.word	0x20000654

080046c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a07      	ldr	r2, [pc, #28]	@ (80046ec <vApplicationGetTimerTaskMemory+0x2c>)
 80046d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4a06      	ldr	r2, [pc, #24]	@ (80046f0 <vApplicationGetTimerTaskMemory+0x30>)
 80046d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	20000854 	.word	0x20000854
 80046f0:	200008fc 	.word	0x200008fc

080046f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f103 0208 	add.w	r2, r3, #8
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f103 0208 	add.w	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f103 0208 	add.w	r2, r3, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d103      	bne.n	80047b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e00c      	b.n	80047d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3308      	adds	r3, #8
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e002      	b.n	80047c4 <vListInsert+0x2e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d2f6      	bcs.n	80047be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6852      	ldr	r2, [r2, #4]
 8004828:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d103      	bne.n	800483c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	1e5a      	subs	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004888:	f002 f8a6 	bl	80069d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	68f9      	ldr	r1, [r7, #12]
 8004896:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	441a      	add	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b8:	3b01      	subs	r3, #1
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	22ff      	movs	r2, #255	@ 0xff
 80048cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	@ 0xff
 80048d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01a      	beq.n	800491c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3310      	adds	r3, #16
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f942 	bl	8005b74 <xTaskRemoveFromEventList>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f6:	4b0d      	ldr	r3, [pc, #52]	@ (800492c <xQueueGenericReset+0xd0>)
 80048f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	e009      	b.n	800491c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3310      	adds	r3, #16
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fef1 	bl	80046f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3324      	adds	r3, #36	@ 0x24
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff feec 	bl	80046f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800491c:	f002 f88e 	bl	8006a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004920:	2301      	movs	r3, #1
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08e      	sub	sp, #56	@ 0x38
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <xQueueGenericCreateStatic+0x56>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <xQueueGenericCreateStatic+0x5a>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueGenericCreateStatic+0x5c>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	623b      	str	r3, [r7, #32]
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	e7fd      	b.n	80049a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d102      	bne.n	80049b4 <xQueueGenericCreateStatic+0x84>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <xQueueGenericCreateStatic+0x88>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <xQueueGenericCreateStatic+0x8a>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	61fb      	str	r3, [r7, #28]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049d6:	2350      	movs	r3, #80	@ 0x50
 80049d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b50      	cmp	r3, #80	@ 0x50
 80049de:	d00b      	beq.n	80049f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	61bb      	str	r3, [r7, #24]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f805 	bl	8004a2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3730      	adds	r7, #48	@ 0x30
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e002      	b.n	8004a4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a58:	2101      	movs	r1, #1
 8004a5a:	69b8      	ldr	r0, [r7, #24]
 8004a5c:	f7ff fefe 	bl	800485c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	@ 0x38
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <xQueueGenericSend+0x34>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <xQueueGenericSend+0x42>
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <xQueueGenericSend+0x46>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <xQueueGenericSend+0x48>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <xQueueGenericSend+0x64>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d103      	bne.n	8004ae2 <xQueueGenericSend+0x72>
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <xQueueGenericSend+0x76>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueGenericSend+0x78>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <xQueueGenericSend+0x94>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b04:	f001 f9fc 	bl	8005f00 <xTaskGetSchedulerState>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <xQueueGenericSend+0xa4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <xQueueGenericSend+0xa8>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <xQueueGenericSend+0xaa>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10b      	bne.n	8004b36 <xQueueGenericSend+0xc6>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	61fb      	str	r3, [r7, #28]
}
 8004b30:	bf00      	nop
 8004b32:	bf00      	nop
 8004b34:	e7fd      	b.n	8004b32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b36:	f001 ff4f 	bl	80069d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <xQueueGenericSend+0xdc>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d129      	bne.n	8004ba0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b52:	f000 fa0f 	bl	8004f74 <prvCopyDataToQueue>
 8004b56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b62:	3324      	adds	r3, #36	@ 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f805 	bl	8005b74 <xTaskRemoveFromEventList>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d013      	beq.n	8004b98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b70:	4b3f      	ldr	r3, [pc, #252]	@ (8004c70 <xQueueGenericSend+0x200>)
 8004b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	e00a      	b.n	8004b98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b88:	4b39      	ldr	r3, [pc, #228]	@ (8004c70 <xQueueGenericSend+0x200>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b98:	f001 ff50 	bl	8006a3c <vPortExitCritical>
				return pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e063      	b.n	8004c68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba6:	f001 ff49 	bl	8006a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e05c      	b.n	8004c68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f83f 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc2:	f001 ff3b 	bl	8006a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc6:	f000 fda7 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bca:	f001 ff05 	bl	80069d8 <vPortEnterCritical>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <xQueueGenericSend+0x174>
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x18a>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfa:	f001 ff1f 	bl	8006a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f001 f82e 	bl	8005c68 <xTaskCheckForTimeOut>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d124      	bne.n	8004c5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c14:	f000 faa6 	bl	8005164 <prvIsQueueFull>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	3310      	adds	r3, #16
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 ff52 	bl	8005ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c2e:	f000 fa31 	bl	8005094 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f000 fd7f 	bl	8005734 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f af7c 	bne.w	8004b36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <xQueueGenericSend+0x200>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e772      	b.n	8004b36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c52:	f000 fa1f 	bl	8005094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c56:	f000 fd6d 	bl	8005734 <xTaskResumeAll>
 8004c5a:	e76c      	b.n	8004b36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c5e:	f000 fa19 	bl	8005094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c62:	f000 fd67 	bl	8005734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3738      	adds	r7, #56	@ 0x38
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b090      	sub	sp, #64	@ 0x40
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x3e>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x42>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <xQueueGenericSendFromISR+0x44>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d103      	bne.n	8004ce2 <xQueueGenericSendFromISR+0x6e>
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <xQueueGenericSendFromISR+0x72>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <xQueueGenericSendFromISR+0x74>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	623b      	str	r3, [r7, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	e7fd      	b.n	8004d00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d04:	f001 ff48 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d08:	f3ef 8211 	mrs	r2, BASEPRI
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <xQueueGenericSendFromISR+0xc2>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d12f      	bne.n	8004d96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d4c:	f000 f912 	bl	8004f74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d112      	bne.n	8004d80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	3324      	adds	r3, #36	@ 0x24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 ff04 	bl	8005b74 <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00e      	beq.n	8004d90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e007      	b.n	8004d90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004d84:	3301      	adds	r3, #1
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b25a      	sxtb	r2, r3
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004d90:	2301      	movs	r3, #1
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004d94:	e001      	b.n	8004d9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004da4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	@ 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08c      	sub	sp, #48	@ 0x30
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <xQueueReceive+0x32>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	623b      	str	r3, [r7, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <xQueueReceive+0x40>
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <xQueueReceive+0x44>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <xQueueReceive+0x46>
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10b      	bne.n	8004e12 <xQueueReceive+0x62>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	61fb      	str	r3, [r7, #28]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e12:	f001 f875 	bl	8005f00 <xTaskGetSchedulerState>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <xQueueReceive+0x72>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <xQueueReceive+0x76>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueReceive+0x78>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueReceive+0x94>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	61bb      	str	r3, [r7, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e44:	f001 fdc8 	bl	80069d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01f      	beq.n	8004e94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e58:	f000 f8f6 	bl	8005048 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5e:	1e5a      	subs	r2, r3, #1
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00f      	beq.n	8004e8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	3310      	adds	r3, #16
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fe7f 	bl	8005b74 <xTaskRemoveFromEventList>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d007      	beq.n	8004e8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f70 <xQueueReceive+0x1c0>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e8c:	f001 fdd6 	bl	8006a3c <vPortExitCritical>
				return pdPASS;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e069      	b.n	8004f68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d103      	bne.n	8004ea2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e9a:	f001 fdcf 	bl	8006a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e062      	b.n	8004f68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ea8:	f107 0310 	add.w	r3, r7, #16
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fec5 	bl	8005c3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eb6:	f001 fdc1 	bl	8006a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eba:	f000 fc2d 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ebe:	f001 fd8b 	bl	80069d8 <vPortEnterCritical>
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d103      	bne.n	8004ed8 <xQueueReceive+0x128>
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d103      	bne.n	8004eee <xQueueReceive+0x13e>
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eee:	f001 fda5 	bl	8006a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ef2:	1d3a      	adds	r2, r7, #4
 8004ef4:	f107 0310 	add.w	r3, r7, #16
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 feb4 	bl	8005c68 <xTaskCheckForTimeOut>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d123      	bne.n	8004f4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f08:	f000 f916 	bl	8005138 <prvIsQueueEmpty>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	3324      	adds	r3, #36	@ 0x24
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fdd8 	bl	8005ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f22:	f000 f8b7 	bl	8005094 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f26:	f000 fc05 	bl	8005734 <xTaskResumeAll>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d189      	bne.n	8004e44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004f30:	4b0f      	ldr	r3, [pc, #60]	@ (8004f70 <xQueueReceive+0x1c0>)
 8004f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	e780      	b.n	8004e44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f44:	f000 f8a6 	bl	8005094 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f48:	f000 fbf4 	bl	8005734 <xTaskResumeAll>
 8004f4c:	e77a      	b.n	8004e44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f50:	f000 f8a0 	bl	8005094 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f54:	f000 fbee 	bl	8005734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5a:	f000 f8ed 	bl	8005138 <prvIsQueueEmpty>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f43f af6f 	beq.w	8004e44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	@ 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10d      	bne.n	8004fae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d14d      	bne.n	8005036 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ffcc 	bl	8005f3c <xTaskPriorityDisinherit>
 8004fa4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	e043      	b.n	8005036 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d119      	bne.n	8004fe8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6858      	ldr	r0, [r3, #4]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	f002 f8f8 	bl	80071b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d32b      	bcc.n	8005036 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	e026      	b.n	8005036 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68d8      	ldr	r0, [r3, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	f002 f8de 	bl	80071b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	425b      	negs	r3, r3
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68da      	ldr	r2, [r3, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d207      	bcs.n	8005024 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	425b      	negs	r3, r3
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d105      	bne.n	8005036 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	3b01      	subs	r3, #1
 8005034:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800503e:	697b      	ldr	r3, [r7, #20]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	441a      	add	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d303      	bcc.n	800507c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68d9      	ldr	r1, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	461a      	mov	r2, r3
 8005086:	6838      	ldr	r0, [r7, #0]
 8005088:	f002 f894 	bl	80071b4 <memcpy>
	}
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800509c:	f001 fc9c 	bl	80069d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050a8:	e011      	b.n	80050ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3324      	adds	r3, #36	@ 0x24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fd5c 	bl	8005b74 <xTaskRemoveFromEventList>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050c2:	f000 fe35 	bl	8005d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dce9      	bgt.n	80050aa <prvUnlockQueue+0x16>
 80050d6:	e000      	b.n	80050da <prvUnlockQueue+0x46>
					break;
 80050d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	22ff      	movs	r2, #255	@ 0xff
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050e2:	f001 fcab 	bl	8006a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050e6:	f001 fc77 	bl	80069d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f2:	e011      	b.n	8005118 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d012      	beq.n	8005122 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3310      	adds	r3, #16
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fd37 	bl	8005b74 <xTaskRemoveFromEventList>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800510c:	f000 fe10 	bl	8005d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005110:	7bbb      	ldrb	r3, [r7, #14]
 8005112:	3b01      	subs	r3, #1
 8005114:	b2db      	uxtb	r3, r3
 8005116:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800511c:	2b00      	cmp	r3, #0
 800511e:	dce9      	bgt.n	80050f4 <prvUnlockQueue+0x60>
 8005120:	e000      	b.n	8005124 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005122:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	22ff      	movs	r2, #255	@ 0xff
 8005128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800512c:	f001 fc86 	bl	8006a3c <vPortExitCritical>
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005140:	f001 fc4a 	bl	80069d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d102      	bne.n	8005152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e001      	b.n	8005156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005156:	f001 fc71 	bl	8006a3c <vPortExitCritical>

	return xReturn;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800516c:	f001 fc34 	bl	80069d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	429a      	cmp	r2, r3
 800517a:	d102      	bne.n	8005182 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e001      	b.n	8005186 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005186:	f001 fc59 	bl	8006a3c <vPortExitCritical>

	return xReturn;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e014      	b.n	80051ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051a4:	4a0f      	ldr	r2, [pc, #60]	@ (80051e4 <vQueueAddToRegistry+0x50>)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051b0:	490c      	ldr	r1, [pc, #48]	@ (80051e4 <vQueueAddToRegistry+0x50>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ba:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <vQueueAddToRegistry+0x50>)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	4413      	add	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051c6:	e006      	b.n	80051d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b07      	cmp	r3, #7
 80051d2:	d9e7      	bls.n	80051a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000cfc 	.word	0x20000cfc

080051e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051f8:	f001 fbee 	bl	80069d8 <vPortEnterCritical>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005202:	b25b      	sxtb	r3, r3
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d103      	bne.n	8005212 <vQueueWaitForMessageRestricted+0x2a>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005218:	b25b      	sxtb	r3, r3
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521e:	d103      	bne.n	8005228 <vQueueWaitForMessageRestricted+0x40>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005228:	f001 fc08 	bl	8006a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3324      	adds	r3, #36	@ 0x24
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fc6d 	bl	8005b1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff26 	bl	8005094 <prvUnlockQueue>
	}
 8005248:	bf00      	nop
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	@ 0x38
 8005254:	af04      	add	r7, sp, #16
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800525e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10b      	bne.n	800527c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	623b      	str	r3, [r7, #32]
}
 8005276:	bf00      	nop
 8005278:	bf00      	nop
 800527a:	e7fd      	b.n	8005278 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	61fb      	str	r3, [r7, #28]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800529a:	23a8      	movs	r3, #168	@ 0xa8
 800529c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80052a2:	d00b      	beq.n	80052bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61bb      	str	r3, [r7, #24]
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01e      	beq.n	8005302 <xTaskCreateStatic+0xb2>
 80052c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01b      	beq.n	8005302 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052dc:	2300      	movs	r3, #0
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	f107 0314 	add.w	r3, r7, #20
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f851 	bl	800539c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052fc:	f000 f8f6 	bl	80054ec <prvAddNewTaskToReadyList>
 8005300:	e001      	b.n	8005306 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005306:	697b      	ldr	r3, [r7, #20]
	}
 8005308:	4618      	mov	r0, r3
 800530a:	3728      	adds	r7, #40	@ 0x28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	@ 0x30
 8005314:	af04      	add	r7, sp, #16
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fc79 	bl	8006c1c <pvPortMalloc>
 800532a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00e      	beq.n	8005350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005332:	20a8      	movs	r0, #168	@ 0xa8
 8005334:	f001 fc72 	bl	8006c1c <pvPortMalloc>
 8005338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
 8005346:	e005      	b.n	8005354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f001 fd35 	bl	8006db8 <vPortFree>
 800534e:	e001      	b.n	8005354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d017      	beq.n	800538a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	2300      	movs	r3, #0
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9302      	str	r3, [sp, #8]
 800536c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f80f 	bl	800539c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800537e:	69f8      	ldr	r0, [r7, #28]
 8005380:	f000 f8b4 	bl	80054ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005384:	2301      	movs	r3, #1
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e002      	b.n	8005390 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005390:	69bb      	ldr	r3, [r7, #24]
	}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	461a      	mov	r2, r3
 80053b4:	21a5      	movs	r1, #165	@ 0xa5
 80053b6:	f001 fe73 	bl	80070a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053c4:	3b01      	subs	r3, #1
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f023 0307 	bic.w	r3, r3, #7
 80053d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01f      	beq.n	800543c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	e012      	b.n	8005428 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	3334      	adds	r3, #52	@ 0x34
 8005412:	460a      	mov	r2, r1
 8005414:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	d9e9      	bls.n	8005402 <prvInitialiseNewTask+0x66>
 800542e:	e000      	b.n	8005432 <prvInitialiseNewTask+0x96>
			{
				break;
 8005430:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800543a:	e003      	b.n	8005444 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005446:	2b37      	cmp	r3, #55	@ 0x37
 8005448:	d901      	bls.n	800544e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800544a:	2337      	movs	r3, #55	@ 0x37
 800544c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005452:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005458:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2200      	movs	r2, #0
 800545e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff f965 	bl	8004734 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	3318      	adds	r3, #24
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f960 	bl	8004734 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005478:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	2200      	movs	r2, #0
 8005496:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	3354      	adds	r3, #84	@ 0x54
 800549e:	224c      	movs	r2, #76	@ 0x4c
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 fdfc 	bl	80070a0 <memset>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	4a0d      	ldr	r2, [pc, #52]	@ (80054e0 <prvInitialiseNewTask+0x144>)
 80054ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	4a0c      	ldr	r2, [pc, #48]	@ (80054e4 <prvInitialiseNewTask+0x148>)
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <prvInitialiseNewTask+0x14c>)
 80054b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68f9      	ldr	r1, [r7, #12]
 80054be:	69b8      	ldr	r0, [r7, #24]
 80054c0:	f001 f95a 	bl	8006778 <pxPortInitialiseStack>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d6:	bf00      	nop
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20004f90 	.word	0x20004f90
 80054e4:	20004ff8 	.word	0x20004ff8
 80054e8:	20005060 	.word	0x20005060

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f001 fa70 	bl	80069d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	@ (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a2c      	ldr	r2, [pc, #176]	@ (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005502:	4b2c      	ldr	r3, [pc, #176]	@ (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550a:	4a2a      	ldr	r2, [pc, #168]	@ (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005518:	f000 fc2e 	bl	8005d78 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551e:	4b26      	ldr	r3, [pc, #152]	@ (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005534:	4a1f      	ldr	r2, [pc, #124]	@ (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553a:	4b20      	ldr	r3, [pc, #128]	@ (80055bc <prvAddNewTaskToReadyList+0xd0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a1e      	ldr	r2, [pc, #120]	@ (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005544:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005550:	4b1b      	ldr	r3, [pc, #108]	@ (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <prvAddNewTaskToReadyList+0x74>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555c:	4a18      	ldr	r2, [pc, #96]	@ (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <prvAddNewTaskToReadyList+0xd8>)
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7ff f8e9 	bl	800474e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800557c:	f001 fa5e 	bl	8006a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005580:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d207      	bcs.n	80055a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <prvAddNewTaskToReadyList+0xdc>)
 8005598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20001210 	.word	0x20001210
 80055b4:	20000d3c 	.word	0x20000d3c
 80055b8:	2000121c 	.word	0x2000121c
 80055bc:	2000122c 	.word	0x2000122c
 80055c0:	20001218 	.word	0x20001218
 80055c4:	20000d40 	.word	0x20000d40
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055de:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <vTaskDelay+0x64>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <vTaskDelay+0x32>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055fe:	f000 f88b 	bl	8005718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005602:	2100      	movs	r1, #0
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fd09 	bl	800601c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800560a:	f000 f893 	bl	8005734 <xTaskResumeAll>
 800560e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005616:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <vTaskDelay+0x68>)
 8005618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20001238 	.word	0x20001238
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005646:	463a      	mov	r2, r7
 8005648:	1d39      	adds	r1, r7, #4
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f81c 	bl	800468c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	9202      	str	r2, [sp, #8]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	460a      	mov	r2, r1
 8005666:	4924      	ldr	r1, [pc, #144]	@ (80056f8 <vTaskStartScheduler+0xc0>)
 8005668:	4824      	ldr	r0, [pc, #144]	@ (80056fc <vTaskStartScheduler+0xc4>)
 800566a:	f7ff fdf1 	bl	8005250 <xTaskCreateStatic>
 800566e:	4603      	mov	r3, r0
 8005670:	4a23      	ldr	r2, [pc, #140]	@ (8005700 <vTaskStartScheduler+0xc8>)
 8005672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005674:	4b22      	ldr	r3, [pc, #136]	@ (8005700 <vTaskStartScheduler+0xc8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800568c:	f000 fd1a 	bl	80060c4 <xTimerCreateTimerTask>
 8005690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d11b      	bne.n	80056d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	613b      	str	r3, [r7, #16]
}
 80056aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ac:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <vTaskStartScheduler+0xcc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3354      	adds	r3, #84	@ 0x54
 80056b2:	4a15      	ldr	r2, [pc, #84]	@ (8005708 <vTaskStartScheduler+0xd0>)
 80056b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <vTaskStartScheduler+0xd4>)
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056be:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <vTaskStartScheduler+0xd8>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056c4:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <vTaskStartScheduler+0xdc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ca:	f001 f8e1 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056ce:	e00f      	b.n	80056f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d10b      	bne.n	80056f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <vTaskStartScheduler+0xb4>
}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	08007aac 	.word	0x08007aac
 80056fc:	08005d49 	.word	0x08005d49
 8005700:	20001234 	.word	0x20001234
 8005704:	20000d3c 	.word	0x20000d3c
 8005708:	20000024 	.word	0x20000024
 800570c:	20001230 	.word	0x20001230
 8005710:	2000121c 	.word	0x2000121c
 8005714:	20001214 	.word	0x20001214

08005718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <vTaskSuspendAll+0x18>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a03      	ldr	r2, [pc, #12]	@ (8005730 <vTaskSuspendAll+0x18>)
 8005724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	20001238 	.word	0x20001238

08005734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005742:	4b42      	ldr	r3, [pc, #264]	@ (800584c <xTaskResumeAll+0x118>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <xTaskResumeAll+0x2e>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	603b      	str	r3, [r7, #0]
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005762:	f001 f939 	bl	80069d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005766:	4b39      	ldr	r3, [pc, #228]	@ (800584c <xTaskResumeAll+0x118>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3b01      	subs	r3, #1
 800576c:	4a37      	ldr	r2, [pc, #220]	@ (800584c <xTaskResumeAll+0x118>)
 800576e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005770:	4b36      	ldr	r3, [pc, #216]	@ (800584c <xTaskResumeAll+0x118>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d162      	bne.n	800583e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005778:	4b35      	ldr	r3, [pc, #212]	@ (8005850 <xTaskResumeAll+0x11c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d05e      	beq.n	800583e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005780:	e02f      	b.n	80057e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005782:	4b34      	ldr	r3, [pc, #208]	@ (8005854 <xTaskResumeAll+0x120>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3318      	adds	r3, #24
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff f83a 	bl	8004808 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3304      	adds	r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff f835 	bl	8004808 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005858 <xTaskResumeAll+0x124>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d903      	bls.n	80057b2 <xTaskResumeAll+0x7e>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <xTaskResumeAll+0x124>)
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4a27      	ldr	r2, [pc, #156]	@ (800585c <xTaskResumeAll+0x128>)
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f7fe ffc0 	bl	800474e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d2:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <xTaskResumeAll+0x12c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80057dc:	4b21      	ldr	r3, [pc, #132]	@ (8005864 <xTaskResumeAll+0x130>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005854 <xTaskResumeAll+0x120>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1cb      	bne.n	8005782 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057f0:	f000 fb66 	bl	8005ec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005868 <xTaskResumeAll+0x134>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d010      	beq.n	8005822 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005800:	f000 f846 	bl	8005890 <xTaskIncrementTick>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800580a:	4b16      	ldr	r3, [pc, #88]	@ (8005864 <xTaskResumeAll+0x130>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3b01      	subs	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f1      	bne.n	8005800 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800581c:	4b12      	ldr	r3, [pc, #72]	@ (8005868 <xTaskResumeAll+0x134>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <xTaskResumeAll+0x130>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800582e:	4b0f      	ldr	r3, [pc, #60]	@ (800586c <xTaskResumeAll+0x138>)
 8005830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800583e:	f001 f8fd 	bl	8006a3c <vPortExitCritical>

	return xAlreadyYielded;
 8005842:	68bb      	ldr	r3, [r7, #8]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20001238 	.word	0x20001238
 8005850:	20001210 	.word	0x20001210
 8005854:	200011d0 	.word	0x200011d0
 8005858:	20001218 	.word	0x20001218
 800585c:	20000d40 	.word	0x20000d40
 8005860:	20000d3c 	.word	0x20000d3c
 8005864:	20001224 	.word	0x20001224
 8005868:	20001220 	.word	0x20001220
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005876:	4b05      	ldr	r3, [pc, #20]	@ (800588c <xTaskGetTickCount+0x1c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800587c:	687b      	ldr	r3, [r7, #4]
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20001214 	.word	0x20001214

08005890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589a:	4b4f      	ldr	r3, [pc, #316]	@ (80059d8 <xTaskIncrementTick+0x148>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 8090 	bne.w	80059c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a4:	4b4d      	ldr	r3, [pc, #308]	@ (80059dc <xTaskIncrementTick+0x14c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058ac:	4a4b      	ldr	r2, [pc, #300]	@ (80059dc <xTaskIncrementTick+0x14c>)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d121      	bne.n	80058fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b8:	4b49      	ldr	r3, [pc, #292]	@ (80059e0 <xTaskIncrementTick+0x150>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <xTaskIncrementTick+0x4a>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	603b      	str	r3, [r7, #0]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xTaskIncrementTick+0x46>
 80058da:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <xTaskIncrementTick+0x150>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	4b40      	ldr	r3, [pc, #256]	@ (80059e4 <xTaskIncrementTick+0x154>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3e      	ldr	r2, [pc, #248]	@ (80059e0 <xTaskIncrementTick+0x150>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4a3e      	ldr	r2, [pc, #248]	@ (80059e4 <xTaskIncrementTick+0x154>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6013      	str	r3, [r2, #0]
 80058ee:	4b3e      	ldr	r3, [pc, #248]	@ (80059e8 <xTaskIncrementTick+0x158>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4a3c      	ldr	r2, [pc, #240]	@ (80059e8 <xTaskIncrementTick+0x158>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	f000 fae2 	bl	8005ec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058fc:	4b3b      	ldr	r3, [pc, #236]	@ (80059ec <xTaskIncrementTick+0x15c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d349      	bcc.n	800599a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005906:	4b36      	ldr	r3, [pc, #216]	@ (80059e0 <xTaskIncrementTick+0x150>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005910:	4b36      	ldr	r3, [pc, #216]	@ (80059ec <xTaskIncrementTick+0x15c>)
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	601a      	str	r2, [r3, #0]
					break;
 8005918:	e03f      	b.n	800599a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800591a:	4b31      	ldr	r3, [pc, #196]	@ (80059e0 <xTaskIncrementTick+0x150>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d203      	bcs.n	800593a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005932:	4a2e      	ldr	r2, [pc, #184]	@ (80059ec <xTaskIncrementTick+0x15c>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005938:	e02f      	b.n	800599a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe ff62 	bl	8004808 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe ff59 	bl	8004808 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4b25      	ldr	r3, [pc, #148]	@ (80059f0 <xTaskIncrementTick+0x160>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d903      	bls.n	800596a <xTaskIncrementTick+0xda>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	4a22      	ldr	r2, [pc, #136]	@ (80059f0 <xTaskIncrementTick+0x160>)
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4a1f      	ldr	r2, [pc, #124]	@ (80059f4 <xTaskIncrementTick+0x164>)
 8005978:	441a      	add	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3304      	adds	r3, #4
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7fe fee4 	bl	800474e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <xTaskIncrementTick+0x168>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	429a      	cmp	r2, r3
 8005992:	d3b8      	bcc.n	8005906 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005998:	e7b5      	b.n	8005906 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800599a:	4b17      	ldr	r3, [pc, #92]	@ (80059f8 <xTaskIncrementTick+0x168>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a0:	4914      	ldr	r1, [pc, #80]	@ (80059f4 <xTaskIncrementTick+0x164>)
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d901      	bls.n	80059b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80059b2:	2301      	movs	r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b6:	4b11      	ldr	r3, [pc, #68]	@ (80059fc <xTaskIncrementTick+0x16c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e004      	b.n	80059ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <xTaskIncrementTick+0x170>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005a00 <xTaskIncrementTick+0x170>)
 80059cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059ce:	697b      	ldr	r3, [r7, #20]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20001238 	.word	0x20001238
 80059dc:	20001214 	.word	0x20001214
 80059e0:	200011c8 	.word	0x200011c8
 80059e4:	200011cc 	.word	0x200011cc
 80059e8:	20001228 	.word	0x20001228
 80059ec:	20001230 	.word	0x20001230
 80059f0:	20001218 	.word	0x20001218
 80059f4:	20000d40 	.word	0x20000d40
 80059f8:	20000d3c 	.word	0x20000d3c
 80059fc:	20001224 	.word	0x20001224
 8005a00:	20001220 	.word	0x20001220

08005a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab8 <vTaskSwitchContext+0xb4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a12:	4b2a      	ldr	r3, [pc, #168]	@ (8005abc <vTaskSwitchContext+0xb8>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a18:	e047      	b.n	8005aaa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005a1a:	4b28      	ldr	r3, [pc, #160]	@ (8005abc <vTaskSwitchContext+0xb8>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a20:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <vTaskSwitchContext+0xbc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e011      	b.n	8005a4c <vTaskSwitchContext+0x48>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <vTaskSwitchContext+0x42>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	e7fd      	b.n	8005a42 <vTaskSwitchContext+0x3e>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	491d      	ldr	r1, [pc, #116]	@ (8005ac4 <vTaskSwitchContext+0xc0>)
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0e3      	beq.n	8005a28 <vTaskSwitchContext+0x24>
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ac4 <vTaskSwitchContext+0xc0>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3308      	adds	r3, #8
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d104      	bne.n	8005a90 <vTaskSwitchContext+0x8c>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac8 <vTaskSwitchContext+0xc4>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <vTaskSwitchContext+0xbc>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa0:	4b09      	ldr	r3, [pc, #36]	@ (8005ac8 <vTaskSwitchContext+0xc4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3354      	adds	r3, #84	@ 0x54
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <vTaskSwitchContext+0xc8>)
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20001238 	.word	0x20001238
 8005abc:	20001224 	.word	0x20001224
 8005ac0:	20001218 	.word	0x20001218
 8005ac4:	20000d40 	.word	0x20000d40
 8005ac8:	20000d3c 	.word	0x20000d3c
 8005acc:	20000024 	.word	0x20000024

08005ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af8:	4b07      	ldr	r3, [pc, #28]	@ (8005b18 <vTaskPlaceOnEventList+0x48>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fe fe48 	bl	8004796 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b06:	2101      	movs	r1, #1
 8005b08:	6838      	ldr	r0, [r7, #0]
 8005b0a:	f000 fa87 	bl	800601c <prvAddCurrentTaskToDelayedList>
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000d3c 	.word	0x20000d3c

08005b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	617b      	str	r3, [r7, #20]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7fe fdfd 	bl	800474e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68b8      	ldr	r0, [r7, #8]
 8005b64:	f000 fa5a 	bl	800601c <prvAddCurrentTaskToDelayedList>
	}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000d3c 	.word	0x20000d3c

08005b74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fe2e 	bl	8004808 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bac:	4b1d      	ldr	r3, [pc, #116]	@ (8005c24 <xTaskRemoveFromEventList+0xb0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11d      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fe25 	bl	8004808 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc2:	4b19      	ldr	r3, [pc, #100]	@ (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <xTaskRemoveFromEventList+0x5e>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <xTaskRemoveFromEventList+0xb4>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a13      	ldr	r2, [pc, #76]	@ (8005c2c <xTaskRemoveFromEventList+0xb8>)
 8005be0:	441a      	add	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7fe fdb0 	bl	800474e <vListInsertEnd>
 8005bee:	e005      	b.n	8005bfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	480e      	ldr	r0, [pc, #56]	@ (8005c30 <xTaskRemoveFromEventList+0xbc>)
 8005bf8:	f7fe fda9 	bl	800474e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <xTaskRemoveFromEventList+0xc0>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d905      	bls.n	8005c16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <xTaskRemoveFromEventList+0xc4>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e001      	b.n	8005c1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c1a:	697b      	ldr	r3, [r7, #20]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20001238 	.word	0x20001238
 8005c28:	20001218 	.word	0x20001218
 8005c2c:	20000d40 	.word	0x20000d40
 8005c30:	200011d0 	.word	0x200011d0
 8005c34:	20000d3c 	.word	0x20000d3c
 8005c38:	20001224 	.word	0x20001224

08005c3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <vTaskInternalSetTimeOutState+0x24>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	@ (8005c64 <vTaskInternalSetTimeOutState+0x28>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	605a      	str	r2, [r3, #4]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20001228 	.word	0x20001228
 8005c64:	20001214 	.word	0x20001214

08005c68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005cae:	f000 fe93 	bl	80069d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <xTaskCheckForTimeOut+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e023      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <xTaskCheckForTimeOut+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d007      	beq.n	8005cee <xTaskCheckForTimeOut+0x86>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d302      	bcc.n	8005cee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e015      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d20b      	bcs.n	8005d10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff99 	bl	8005c3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61fb      	str	r3, [r7, #28]
 8005d0e:	e004      	b.n	8005d1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d1a:	f000 fe8f 	bl	8006a3c <vPortExitCritical>

	return xReturn;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20001214 	.word	0x20001214
 8005d2c:	20001228 	.word	0x20001228

08005d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <vTaskMissedYield+0x14>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	20001224 	.word	0x20001224

08005d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d50:	f000 f852 	bl	8005df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <prvIdleTask+0x28>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d9f9      	bls.n	8005d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <prvIdleTask+0x2c>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d6c:	e7f0      	b.n	8005d50 <prvIdleTask+0x8>
 8005d6e:	bf00      	nop
 8005d70:	20000d40 	.word	0x20000d40
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7e:	2300      	movs	r3, #0
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	e00c      	b.n	8005d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <prvInitialiseTaskLists+0x60>)
 8005d90:	4413      	add	r3, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fcae 	bl	80046f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	607b      	str	r3, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b37      	cmp	r3, #55	@ 0x37
 8005da2:	d9ef      	bls.n	8005d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005da4:	480d      	ldr	r0, [pc, #52]	@ (8005ddc <prvInitialiseTaskLists+0x64>)
 8005da6:	f7fe fca5 	bl	80046f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005daa:	480d      	ldr	r0, [pc, #52]	@ (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dac:	f7fe fca2 	bl	80046f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005db0:	480c      	ldr	r0, [pc, #48]	@ (8005de4 <prvInitialiseTaskLists+0x6c>)
 8005db2:	f7fe fc9f 	bl	80046f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005db6:	480c      	ldr	r0, [pc, #48]	@ (8005de8 <prvInitialiseTaskLists+0x70>)
 8005db8:	f7fe fc9c 	bl	80046f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dbc:	480b      	ldr	r0, [pc, #44]	@ (8005dec <prvInitialiseTaskLists+0x74>)
 8005dbe:	f7fe fc99 	bl	80046f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <prvInitialiseTaskLists+0x78>)
 8005dc4:	4a05      	ldr	r2, [pc, #20]	@ (8005ddc <prvInitialiseTaskLists+0x64>)
 8005dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <prvInitialiseTaskLists+0x7c>)
 8005dca:	4a05      	ldr	r2, [pc, #20]	@ (8005de0 <prvInitialiseTaskLists+0x68>)
 8005dcc:	601a      	str	r2, [r3, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000d40 	.word	0x20000d40
 8005ddc:	200011a0 	.word	0x200011a0
 8005de0:	200011b4 	.word	0x200011b4
 8005de4:	200011d0 	.word	0x200011d0
 8005de8:	200011e4 	.word	0x200011e4
 8005dec:	200011fc 	.word	0x200011fc
 8005df0:	200011c8 	.word	0x200011c8
 8005df4:	200011cc 	.word	0x200011cc

08005df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfe:	e019      	b.n	8005e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e00:	f000 fdea 	bl	80069d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <prvCheckTasksWaitingTermination+0x50>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fcf9 	bl	8004808 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <prvCheckTasksWaitingTermination+0x54>)
 8005e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e20:	4b0b      	ldr	r3, [pc, #44]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4a0a      	ldr	r2, [pc, #40]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e2a:	f000 fe07 	bl	8006a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f810 	bl	8005e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <prvCheckTasksWaitingTermination+0x58>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1e1      	bne.n	8005e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200011e4 	.word	0x200011e4
 8005e4c:	20001210 	.word	0x20001210
 8005e50:	200011f8 	.word	0x200011f8

08005e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3354      	adds	r3, #84	@ 0x54
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f925 	bl	80070b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 ff9f 	bl	8006db8 <vPortFree>
				vPortFree( pxTCB );
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 ff9c 	bl	8006db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e80:	e019      	b.n	8005eb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d103      	bne.n	8005e94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 ff93 	bl	8006db8 <vPortFree>
	}
 8005e92:	e010      	b.n	8005eb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d00b      	beq.n	8005eb6 <prvDeleteTCB+0x62>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	60fb      	str	r3, [r7, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	e7fd      	b.n	8005eb2 <prvDeleteTCB+0x5e>
	}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <prvResetNextTaskUnblockTime+0x38>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <prvResetNextTaskUnblockTime+0x3c>)
 8005ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed8:	e008      	b.n	8005eec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eda:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <prvResetNextTaskUnblockTime+0x38>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4a04      	ldr	r2, [pc, #16]	@ (8005efc <prvResetNextTaskUnblockTime+0x3c>)
 8005eea:	6013      	str	r3, [r2, #0]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	200011c8 	.word	0x200011c8
 8005efc:	20001230 	.word	0x20001230

08005f00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f06:	4b0b      	ldr	r3, [pc, #44]	@ (8005f34 <xTaskGetSchedulerState+0x34>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d102      	bne.n	8005f14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e008      	b.n	8005f26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f14:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <xTaskGetSchedulerState+0x38>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	e001      	b.n	8005f26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f26:	687b      	ldr	r3, [r7, #4]
	}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	2000121c 	.word	0x2000121c
 8005f38:	20001238 	.word	0x20001238

08005f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d058      	beq.n	8006004 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f52:	4b2f      	ldr	r3, [pc, #188]	@ (8006010 <xTaskPriorityDisinherit+0xd4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d00b      	beq.n	8005f74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60fb      	str	r3, [r7, #12]
}
 8005f6e:	bf00      	nop
 8005f70:	bf00      	nop
 8005f72:	e7fd      	b.n	8005f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60bb      	str	r3, [r7, #8]
}
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
 8005f92:	e7fd      	b.n	8005f90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f98:	1e5a      	subs	r2, r3, #1
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d02c      	beq.n	8006004 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d128      	bne.n	8006004 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fc26 	bl	8004808 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <xTaskPriorityDisinherit+0xd8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d903      	bls.n	8005fe4 <xTaskPriorityDisinherit+0xa8>
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8006014 <xTaskPriorityDisinherit+0xd8>)
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4a09      	ldr	r2, [pc, #36]	@ (8006018 <xTaskPriorityDisinherit+0xdc>)
 8005ff2:	441a      	add	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f7fe fba7 	bl	800474e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006004:	697b      	ldr	r3, [r7, #20]
	}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000d3c 	.word	0x20000d3c
 8006014:	20001218 	.word	0x20001218
 8006018:	20000d40 	.word	0x20000d40

0800601c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006026:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <prvAddCurrentTaskToDelayedList+0x90>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800602c:	4b20      	ldr	r3, [pc, #128]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fbe8 	bl	8004808 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d10a      	bne.n	8006056 <prvAddCurrentTaskToDelayedList+0x3a>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006046:	4b1a      	ldr	r3, [pc, #104]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	4619      	mov	r1, r3
 800604e:	4819      	ldr	r0, [pc, #100]	@ (80060b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006050:	f7fe fb7d 	bl	800474e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006054:	e026      	b.n	80060a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4413      	add	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800605e:	4b14      	ldr	r3, [pc, #80]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	429a      	cmp	r2, r3
 800606c:	d209      	bcs.n	8006082 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800606e:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b0f      	ldr	r3, [pc, #60]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f7fe fb8b 	bl	8004796 <vListInsert>
}
 8006080:	e010      	b.n	80060a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f7fe fb81 	bl	8004796 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006094:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	429a      	cmp	r2, r3
 800609c:	d202      	bcs.n	80060a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800609e:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6013      	str	r3, [r2, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20001214 	.word	0x20001214
 80060b0:	20000d3c 	.word	0x20000d3c
 80060b4:	200011fc 	.word	0x200011fc
 80060b8:	200011cc 	.word	0x200011cc
 80060bc:	200011c8 	.word	0x200011c8
 80060c0:	20001230 	.word	0x20001230

080060c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	@ 0x28
 80060c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060ce:	f000 fb13 	bl	80066f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <xTimerCreateTimerTask+0x84>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d021      	beq.n	800611e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060e2:	1d3a      	adds	r2, r7, #4
 80060e4:	f107 0108 	add.w	r1, r7, #8
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe fae7 	bl	80046c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	9202      	str	r2, [sp, #8]
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	2302      	movs	r3, #2
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	460a      	mov	r2, r1
 8006104:	4911      	ldr	r1, [pc, #68]	@ (800614c <xTimerCreateTimerTask+0x88>)
 8006106:	4812      	ldr	r0, [pc, #72]	@ (8006150 <xTimerCreateTimerTask+0x8c>)
 8006108:	f7ff f8a2 	bl	8005250 <xTaskCreateStatic>
 800610c:	4603      	mov	r3, r0
 800610e:	4a11      	ldr	r2, [pc, #68]	@ (8006154 <xTimerCreateTimerTask+0x90>)
 8006110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <xTimerCreateTimerTask+0x90>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800611a:	2301      	movs	r3, #1
 800611c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10b      	bne.n	800613c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	613b      	str	r3, [r7, #16]
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800613c:	697b      	ldr	r3, [r7, #20]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000126c 	.word	0x2000126c
 800614c:	08007ab4 	.word	0x08007ab4
 8006150:	08006291 	.word	0x08006291
 8006154:	20001270 	.word	0x20001270

08006158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	@ 0x28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006166:	2300      	movs	r3, #0
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <xTimerGenericCommand+0x30>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	623b      	str	r3, [r7, #32]
}
 8006182:	bf00      	nop
 8006184:	bf00      	nop
 8006186:	e7fd      	b.n	8006184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006188:	4b19      	ldr	r3, [pc, #100]	@ (80061f0 <xTimerGenericCommand+0x98>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d02a      	beq.n	80061e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b05      	cmp	r3, #5
 80061a0:	dc18      	bgt.n	80061d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061a2:	f7ff fead 	bl	8005f00 <xTaskGetSchedulerState>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d109      	bne.n	80061c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061ac:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <xTimerGenericCommand+0x98>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	f107 0110 	add.w	r1, r7, #16
 80061b4:	2300      	movs	r3, #0
 80061b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b8:	f7fe fc5a 	bl	8004a70 <xQueueGenericSend>
 80061bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80061be:	e012      	b.n	80061e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061c0:	4b0b      	ldr	r3, [pc, #44]	@ (80061f0 <xTimerGenericCommand+0x98>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	f107 0110 	add.w	r1, r7, #16
 80061c8:	2300      	movs	r3, #0
 80061ca:	2200      	movs	r2, #0
 80061cc:	f7fe fc50 	bl	8004a70 <xQueueGenericSend>
 80061d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80061d2:	e008      	b.n	80061e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <xTimerGenericCommand+0x98>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	f107 0110 	add.w	r1, r7, #16
 80061dc:	2300      	movs	r3, #0
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	f7fe fd48 	bl	8004c74 <xQueueGenericSendFromISR>
 80061e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	@ 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	2000126c 	.word	0x2000126c

080061f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061fe:	4b23      	ldr	r3, [pc, #140]	@ (800628c <prvProcessExpiredTimer+0x98>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fafb 	bl	8004808 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d023      	beq.n	8006268 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	18d1      	adds	r1, r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6978      	ldr	r0, [r7, #20]
 800622e:	f000 f8d5 	bl	80063dc <prvInsertTimerInActiveList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006238:	2300      	movs	r3, #0
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	2300      	movs	r3, #0
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	2100      	movs	r1, #0
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7ff ff88 	bl	8006158 <xTimerGenericCommand>
 8006248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d114      	bne.n	800627a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	6978      	ldr	r0, [r7, #20]
 8006280:	4798      	blx	r3
}
 8006282:	bf00      	nop
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20001264 	.word	0x20001264

08006290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	4618      	mov	r0, r3
 800629e:	f000 f859 	bl	8006354 <prvGetNextExpireTime>
 80062a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f805 	bl	80062b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062ae:	f000 f8d7 	bl	8006460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b2:	bf00      	nop
 80062b4:	e7f0      	b.n	8006298 <prvTimerTask+0x8>
	...

080062b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062c2:	f7ff fa29 	bl	8005718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f866 	bl	800639c <prvSampleTimeNow>
 80062d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d130      	bne.n	800633a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <prvProcessTimerOrBlockTask+0x3c>
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d806      	bhi.n	80062f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062e6:	f7ff fa25 	bl	8005734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ff81 	bl	80061f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062f2:	e024      	b.n	800633e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062fa:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <prvProcessTimerOrBlockTask+0x90>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <prvProcessTimerOrBlockTask+0x50>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <prvProcessTimerOrBlockTask+0x52>
 8006308:	2300      	movs	r3, #0
 800630a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800630c:	4b0f      	ldr	r3, [pc, #60]	@ (800634c <prvProcessTimerOrBlockTask+0x94>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	f7fe ff65 	bl	80051e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800631e:	f7ff fa09 	bl	8005734 <xTaskResumeAll>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006328:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <prvProcessTimerOrBlockTask+0x98>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
}
 8006338:	e001      	b.n	800633e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800633a:	f7ff f9fb 	bl	8005734 <xTaskResumeAll>
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20001268 	.word	0x20001268
 800634c:	2000126c 	.word	0x2000126c
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800635c:	4b0e      	ldr	r3, [pc, #56]	@ (8006398 <prvGetNextExpireTime+0x44>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <prvGetNextExpireTime+0x16>
 8006366:	2201      	movs	r2, #1
 8006368:	e000      	b.n	800636c <prvGetNextExpireTime+0x18>
 800636a:	2200      	movs	r2, #0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006378:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <prvGetNextExpireTime+0x44>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	e001      	b.n	8006388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20001264 	.word	0x20001264

0800639c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063a4:	f7ff fa64 	bl	8005870 <xTaskGetTickCount>
 80063a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063aa:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <prvSampleTimeNow+0x3c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d205      	bcs.n	80063c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063b4:	f000 f93a 	bl	800662c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063c6:	4a04      	ldr	r2, [pc, #16]	@ (80063d8 <prvSampleTimeNow+0x3c>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20001274 	.word	0x20001274

080063dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d812      	bhi.n	8006428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	429a      	cmp	r2, r3
 800640e:	d302      	bcc.n	8006416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e01b      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006416:	4b10      	ldr	r3, [pc, #64]	@ (8006458 <prvInsertTimerInActiveList+0x7c>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fe f9b8 	bl	8004796 <vListInsert>
 8006426:	e012      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d206      	bcs.n	800643e <prvInsertTimerInActiveList+0x62>
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e007      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643e:	4b07      	ldr	r3, [pc, #28]	@ (800645c <prvInsertTimerInActiveList+0x80>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fe f9a4 	bl	8004796 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800644e:	697b      	ldr	r3, [r7, #20]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20001268 	.word	0x20001268
 800645c:	20001264 	.word	0x20001264

08006460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	@ 0x38
 8006464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006466:	e0ce      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	da19      	bge.n	80064a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	3304      	adds	r3, #4
 8006472:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006498:	6850      	ldr	r0, [r2, #4]
 800649a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800649c:	6892      	ldr	r2, [r2, #8]
 800649e:	4611      	mov	r1, r2
 80064a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f2c0 80ae 	blt.w	8006606 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	3304      	adds	r3, #4
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f9a4 	bl	8004808 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064c0:	463b      	mov	r3, r7
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff ff6a 	bl	800639c <prvSampleTimeNow>
 80064c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	f200 8097 	bhi.w	8006600 <prvProcessReceivedCommands+0x1a0>
 80064d2:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <prvProcessReceivedCommands+0x78>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006501 	.word	0x08006501
 80064e4:	08006577 	.word	0x08006577
 80064e8:	0800658b 	.word	0x0800658b
 80064ec:	080065d7 	.word	0x080065d7
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006501 	.word	0x08006501
 80064f8:	08006577 	.word	0x08006577
 80064fc:	0800658b 	.word	0x0800658b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	18d1      	adds	r1, r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800651e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006520:	f7ff ff5c 	bl	80063dc <prvInsertTimerInActiveList>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06c      	beq.n	8006604 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d061      	beq.n	8006604 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	441a      	add	r2, r3
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2300      	movs	r3, #0
 800654e:	2100      	movs	r1, #0
 8006550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006552:	f7ff fe01 	bl	8006158 <xTimerGenericCommand>
 8006556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d152      	bne.n	8006604 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	61bb      	str	r3, [r7, #24]
}
 8006570:	bf00      	nop
 8006572:	bf00      	nop
 8006574:	e7fd      	b.n	8006572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800657c:	f023 0301 	bic.w	r3, r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006588:	e03d      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800658a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	617b      	str	r3, [r7, #20]
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	e7fd      	b.n	80065be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	18d1      	adds	r1, r2, r3
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d0:	f7ff ff04 	bl	80063dc <prvInsertTimerInActiveList>
					break;
 80065d4:	e017      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e6:	f000 fbe7 	bl	8006db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ea:	e00c      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065fe:	e002      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <prvProcessReceivedCommands+0x1a6>
					break;
 8006604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006606:	4b08      	ldr	r3, [pc, #32]	@ (8006628 <prvProcessReceivedCommands+0x1c8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1d39      	adds	r1, r7, #4
 800660c:	2200      	movs	r2, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fbce 	bl	8004db0 <xQueueReceive>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	f47f af26 	bne.w	8006468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	3730      	adds	r7, #48	@ 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	2000126c 	.word	0x2000126c

0800662c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006632:	e049      	b.n	80066c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006634:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663e:	4b2c      	ldr	r3, [pc, #176]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe f8db 	bl	8004808 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d02f      	beq.n	80066c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	d90e      	bls.n	8006698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006686:	4b1a      	ldr	r3, [pc, #104]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe f880 	bl	8004796 <vListInsert>
 8006696:	e017      	b.n	80066c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2300      	movs	r3, #0
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	2100      	movs	r1, #0
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fd58 	bl	8006158 <xTimerGenericCommand>
 80066a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	603b      	str	r3, [r7, #0]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066c8:	4b09      	ldr	r3, [pc, #36]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1b0      	bne.n	8006634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066d8:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <prvSwitchTimerLists+0xc8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a04      	ldr	r2, [pc, #16]	@ (80066f0 <prvSwitchTimerLists+0xc4>)
 80066de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066e0:	4a04      	ldr	r2, [pc, #16]	@ (80066f4 <prvSwitchTimerLists+0xc8>)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6013      	str	r3, [r2, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20001264 	.word	0x20001264
 80066f4:	20001268 	.word	0x20001268

080066f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066fe:	f000 f96b 	bl	80069d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d120      	bne.n	800674c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800670a:	4814      	ldr	r0, [pc, #80]	@ (800675c <prvCheckForValidListAndQueue+0x64>)
 800670c:	f7fd fff2 	bl	80046f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006710:	4813      	ldr	r0, [pc, #76]	@ (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006712:	f7fd ffef 	bl	80046f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006716:	4b13      	ldr	r3, [pc, #76]	@ (8006764 <prvCheckForValidListAndQueue+0x6c>)
 8006718:	4a10      	ldr	r2, [pc, #64]	@ (800675c <prvCheckForValidListAndQueue+0x64>)
 800671a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800671c:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <prvCheckForValidListAndQueue+0x70>)
 800671e:	4a10      	ldr	r2, [pc, #64]	@ (8006760 <prvCheckForValidListAndQueue+0x68>)
 8006720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4b11      	ldr	r3, [pc, #68]	@ (800676c <prvCheckForValidListAndQueue+0x74>)
 8006728:	4a11      	ldr	r2, [pc, #68]	@ (8006770 <prvCheckForValidListAndQueue+0x78>)
 800672a:	2110      	movs	r1, #16
 800672c:	200a      	movs	r0, #10
 800672e:	f7fe f8ff 	bl	8004930 <xQueueGenericCreateStatic>
 8006732:	4603      	mov	r3, r0
 8006734:	4a08      	ldr	r2, [pc, #32]	@ (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006738:	4b07      	ldr	r3, [pc, #28]	@ (8006758 <prvCheckForValidListAndQueue+0x60>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006740:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <prvCheckForValidListAndQueue+0x60>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	490b      	ldr	r1, [pc, #44]	@ (8006774 <prvCheckForValidListAndQueue+0x7c>)
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fd24 	bl	8005194 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800674c:	f000 f976 	bl	8006a3c <vPortExitCritical>
}
 8006750:	bf00      	nop
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000126c 	.word	0x2000126c
 800675c:	2000123c 	.word	0x2000123c
 8006760:	20001250 	.word	0x20001250
 8006764:	20001264 	.word	0x20001264
 8006768:	20001268 	.word	0x20001268
 800676c:	20001318 	.word	0x20001318
 8006770:	20001278 	.word	0x20001278
 8006774:	08007abc 	.word	0x08007abc

08006778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b04      	subs	r3, #4
 8006788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b04      	subs	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067a8:	4a0c      	ldr	r2, [pc, #48]	@ (80067dc <pxPortInitialiseStack+0x64>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b14      	subs	r3, #20
 80067b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3b04      	subs	r3, #4
 80067be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f06f 0202 	mvn.w	r2, #2
 80067c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b20      	subs	r3, #32
 80067cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	080067e1 	.word	0x080067e1

080067e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ea:	4b13      	ldr	r3, [pc, #76]	@ (8006838 <prvTaskExitError+0x58>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d00b      	beq.n	800680c <prvTaskExitError+0x2c>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	60fb      	str	r3, [r7, #12]
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	e7fd      	b.n	8006808 <prvTaskExitError+0x28>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	60bb      	str	r3, [r7, #8]
}
 800681e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006820:	bf00      	nop
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0fc      	beq.n	8006822 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000020 	.word	0x20000020
 800683c:	00000000 	.word	0x00000000

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	@ (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	@ (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <xPortStartScheduler+0x124>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a47      	ldr	r2, [pc, #284]	@ (80069b8 <xPortStartScheduler+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10b      	bne.n	80068b8 <xPortStartScheduler+0x28>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b8:	4b3e      	ldr	r3, [pc, #248]	@ (80069b4 <xPortStartScheduler+0x124>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3f      	ldr	r2, [pc, #252]	@ (80069bc <xPortStartScheduler+0x12c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d10b      	bne.n	80068da <xPortStartScheduler+0x4a>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60fb      	str	r3, [r7, #12]
}
 80068d4:	bf00      	nop
 80068d6:	bf00      	nop
 80068d8:	e7fd      	b.n	80068d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068da:	4b39      	ldr	r3, [pc, #228]	@ (80069c0 <xPortStartScheduler+0x130>)
 80068dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	22ff      	movs	r2, #255	@ 0xff
 80068ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	4b31      	ldr	r3, [pc, #196]	@ (80069c4 <xPortStartScheduler+0x134>)
 8006900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006902:	4b31      	ldr	r3, [pc, #196]	@ (80069c8 <xPortStartScheduler+0x138>)
 8006904:	2207      	movs	r2, #7
 8006906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006908:	e009      	b.n	800691e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800690a:	4b2f      	ldr	r3, [pc, #188]	@ (80069c8 <xPortStartScheduler+0x138>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	4a2d      	ldr	r2, [pc, #180]	@ (80069c8 <xPortStartScheduler+0x138>)
 8006912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	2b80      	cmp	r3, #128	@ 0x80
 8006928:	d0ef      	beq.n	800690a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800692a:	4b27      	ldr	r3, [pc, #156]	@ (80069c8 <xPortStartScheduler+0x138>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1c3 0307 	rsb	r3, r3, #7
 8006932:	2b04      	cmp	r3, #4
 8006934:	d00b      	beq.n	800694e <xPortStartScheduler+0xbe>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	60bb      	str	r3, [r7, #8]
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	e7fd      	b.n	800694a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800694e:	4b1e      	ldr	r3, [pc, #120]	@ (80069c8 <xPortStartScheduler+0x138>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	4a1c      	ldr	r2, [pc, #112]	@ (80069c8 <xPortStartScheduler+0x138>)
 8006956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006958:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <xPortStartScheduler+0x138>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006960:	4a19      	ldr	r2, [pc, #100]	@ (80069c8 <xPortStartScheduler+0x138>)
 8006962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800696c:	4b17      	ldr	r3, [pc, #92]	@ (80069cc <xPortStartScheduler+0x13c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <xPortStartScheduler+0x13c>)
 8006972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006978:	4b14      	ldr	r3, [pc, #80]	@ (80069cc <xPortStartScheduler+0x13c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <xPortStartScheduler+0x13c>)
 800697e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006984:	f000 f8da 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <xPortStartScheduler+0x140>)
 800698a:	2200      	movs	r2, #0
 800698c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800698e:	f000 f8f9 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006992:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <xPortStartScheduler+0x144>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a0f      	ldr	r2, [pc, #60]	@ (80069d4 <xPortStartScheduler+0x144>)
 8006998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800699c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800699e:	f7ff ff63 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069a2:	f7ff f82f 	bl	8005a04 <vTaskSwitchContext>
	prvTaskExitError();
 80069a6:	f7ff ff1b 	bl	80067e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	e000ed00 	.word	0xe000ed00
 80069b8:	410fc271 	.word	0x410fc271
 80069bc:	410fc270 	.word	0x410fc270
 80069c0:	e000e400 	.word	0xe000e400
 80069c4:	20001368 	.word	0x20001368
 80069c8:	2000136c 	.word	0x2000136c
 80069cc:	e000ed20 	.word	0xe000ed20
 80069d0:	20000020 	.word	0x20000020
 80069d4:	e000ef34 	.word	0xe000ef34

080069d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069f2:	4b10      	ldr	r3, [pc, #64]	@ (8006a34 <vPortEnterCritical+0x5c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006a34 <vPortEnterCritical+0x5c>)
 80069fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <vPortEnterCritical+0x5c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d110      	bne.n	8006a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <vPortEnterCritical+0x60>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	603b      	str	r3, [r7, #0]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <vPortEnterCritical+0x4a>
	}
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000020 	.word	0x20000020
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a42:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <vPortExitCritical+0x50>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <vPortExitCritical+0x26>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	607b      	str	r3, [r7, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	4a08      	ldr	r2, [pc, #32]	@ (8006a8c <vPortExitCritical+0x50>)
 8006a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a6c:	4b07      	ldr	r3, [pc, #28]	@ (8006a8c <vPortExitCritical+0x50>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <vPortExitCritical+0x44>
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
}
 8006a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000020 	.word	0x20000020

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	@ (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe ffa0 	bl	8005a04 <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe febd 	bl	8005890 <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <xPortSysTickHandler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	@ (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000014 	.word	0x20000014
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d915      	bls.n	8006bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a18      	ldr	r2, [pc, #96]	@ (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b16      	ldr	r3, [pc, #88]	@ (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20b      	bcs.n	8006bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	e7fd      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006bde:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <vPortValidateInterruptPriority+0x80>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d90b      	bls.n	8006bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	603b      	str	r3, [r7, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <vPortValidateInterruptPriority+0x62>
	}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000e3f0 	.word	0xe000e3f0
 8006c10:	20001368 	.word	0x20001368
 8006c14:	e000ed0c 	.word	0xe000ed0c
 8006c18:	2000136c 	.word	0x2000136c

08006c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08a      	sub	sp, #40	@ 0x28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c28:	f7fe fd76 	bl	8005718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8006da0 <pvPortMalloc+0x184>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c34:	f000 f924 	bl	8006e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c38:	4b5a      	ldr	r3, [pc, #360]	@ (8006da4 <pvPortMalloc+0x188>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 8095 	bne.w	8006d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01e      	beq.n	8006c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f023 0307 	bic.w	r3, r3, #7
 8006c64:	3308      	adds	r3, #8
 8006c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00b      	beq.n	8006c8a <pvPortMalloc+0x6e>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d06f      	beq.n	8006d70 <pvPortMalloc+0x154>
 8006c90:	4b45      	ldr	r3, [pc, #276]	@ (8006da8 <pvPortMalloc+0x18c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d86a      	bhi.n	8006d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c9a:	4b44      	ldr	r3, [pc, #272]	@ (8006dac <pvPortMalloc+0x190>)
 8006c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c9e:	4b43      	ldr	r3, [pc, #268]	@ (8006dac <pvPortMalloc+0x190>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ca4:	e004      	b.n	8006cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d903      	bls.n	8006cc2 <pvPortMalloc+0xa6>
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f1      	bne.n	8006ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cc2:	4b37      	ldr	r3, [pc, #220]	@ (8006da0 <pvPortMalloc+0x184>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d051      	beq.n	8006d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4413      	add	r3, r2
 8006cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	1ad2      	subs	r2, r2, r3
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d920      	bls.n	8006d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00b      	beq.n	8006d18 <pvPortMalloc+0xfc>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	613b      	str	r3, [r7, #16]
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	e7fd      	b.n	8006d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d2a:	69b8      	ldr	r0, [r7, #24]
 8006d2c:	f000 f90a 	bl	8006f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d30:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <pvPortMalloc+0x18c>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006da8 <pvPortMalloc+0x18c>)
 8006d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006da8 <pvPortMalloc+0x18c>)
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b1b      	ldr	r3, [pc, #108]	@ (8006db0 <pvPortMalloc+0x194>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d203      	bcs.n	8006d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d4a:	4b17      	ldr	r3, [pc, #92]	@ (8006da8 <pvPortMalloc+0x18c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a18      	ldr	r2, [pc, #96]	@ (8006db0 <pvPortMalloc+0x194>)
 8006d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	4b13      	ldr	r3, [pc, #76]	@ (8006da4 <pvPortMalloc+0x188>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d66:	4b13      	ldr	r3, [pc, #76]	@ (8006db4 <pvPortMalloc+0x198>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a11      	ldr	r2, [pc, #68]	@ (8006db4 <pvPortMalloc+0x198>)
 8006d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d70:	f7fe fce0 	bl	8005734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f003 0307 	and.w	r3, r3, #7
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <pvPortMalloc+0x17a>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60fb      	str	r3, [r7, #12]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <pvPortMalloc+0x176>
	return pvReturn;
 8006d96:	69fb      	ldr	r3, [r7, #28]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	@ 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20004f78 	.word	0x20004f78
 8006da4:	20004f8c 	.word	0x20004f8c
 8006da8:	20004f7c 	.word	0x20004f7c
 8006dac:	20004f70 	.word	0x20004f70
 8006db0:	20004f80 	.word	0x20004f80
 8006db4:	20004f84 	.word	0x20004f84

08006db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d04f      	beq.n	8006e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dca:	2308      	movs	r3, #8
 8006dcc:	425b      	negs	r3, r3
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b25      	ldr	r3, [pc, #148]	@ (8006e74 <vPortFree+0xbc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <vPortFree+0x46>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	60fb      	str	r3, [r7, #12]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <vPortFree+0x66>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	e7fd      	b.n	8006e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	4b14      	ldr	r3, [pc, #80]	@ (8006e74 <vPortFree+0xbc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01e      	beq.n	8006e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11a      	bne.n	8006e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	4b0e      	ldr	r3, [pc, #56]	@ (8006e74 <vPortFree+0xbc>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	401a      	ands	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e44:	f7fe fc68 	bl	8005718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <vPortFree+0xc0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4413      	add	r3, r2
 8006e52:	4a09      	ldr	r2, [pc, #36]	@ (8006e78 <vPortFree+0xc0>)
 8006e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e56:	6938      	ldr	r0, [r7, #16]
 8006e58:	f000 f874 	bl	8006f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e5c:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <vPortFree+0xc4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a06      	ldr	r2, [pc, #24]	@ (8006e7c <vPortFree+0xc4>)
 8006e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e66:	f7fe fc65 	bl	8005734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20004f8c 	.word	0x20004f8c
 8006e78:	20004f7c 	.word	0x20004f7c
 8006e7c:	20004f88 	.word	0x20004f88

08006e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e8c:	4b27      	ldr	r3, [pc, #156]	@ (8006f2c <prvHeapInit+0xac>)
 8006e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3307      	adds	r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0307 	bic.w	r3, r3, #7
 8006ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	4a1f      	ldr	r2, [pc, #124]	@ (8006f2c <prvHeapInit+0xac>)
 8006eb0:	4413      	add	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f30 <prvHeapInit+0xb0>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8006f30 <prvHeapInit+0xb0>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4413      	add	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ecc:	2208      	movs	r2, #8
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a15      	ldr	r2, [pc, #84]	@ (8006f34 <prvHeapInit+0xb4>)
 8006ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ee2:	4b14      	ldr	r3, [pc, #80]	@ (8006f34 <prvHeapInit+0xb4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eea:	4b12      	ldr	r3, [pc, #72]	@ (8006f34 <prvHeapInit+0xb4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f00:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <prvHeapInit+0xb4>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f38 <prvHeapInit+0xb8>)
 8006f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4a09      	ldr	r2, [pc, #36]	@ (8006f3c <prvHeapInit+0xbc>)
 8006f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f18:	4b09      	ldr	r3, [pc, #36]	@ (8006f40 <prvHeapInit+0xc0>)
 8006f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f1e:	601a      	str	r2, [r3, #0]
}
 8006f20:	bf00      	nop
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20001370 	.word	0x20001370
 8006f30:	20004f70 	.word	0x20004f70
 8006f34:	20004f78 	.word	0x20004f78
 8006f38:	20004f80 	.word	0x20004f80
 8006f3c:	20004f7c 	.word	0x20004f7c
 8006f40:	20004f8c 	.word	0x20004f8c

08006f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <prvInsertBlockIntoFreeList+0xac>)
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e002      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x14>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d8f7      	bhi.n	8006f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d108      	bne.n	8006f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d118      	bne.n	8006fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d00d      	beq.n	8006fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	441a      	add	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	e008      	b.n	8006fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e003      	b.n	8006fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d002      	beq.n	8006fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20004f70 	.word	0x20004f70
 8006ff4:	20004f78 	.word	0x20004f78

08006ff8 <sniprintf>:
 8006ff8:	b40c      	push	{r2, r3}
 8006ffa:	b530      	push	{r4, r5, lr}
 8006ffc:	4b17      	ldr	r3, [pc, #92]	@ (800705c <sniprintf+0x64>)
 8006ffe:	1e0c      	subs	r4, r1, #0
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	b09d      	sub	sp, #116	@ 0x74
 8007004:	da08      	bge.n	8007018 <sniprintf+0x20>
 8007006:	238b      	movs	r3, #139	@ 0x8b
 8007008:	602b      	str	r3, [r5, #0]
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	b01d      	add	sp, #116	@ 0x74
 8007010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007014:	b002      	add	sp, #8
 8007016:	4770      	bx	lr
 8007018:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800701c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007020:	bf14      	ite	ne
 8007022:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007026:	4623      	moveq	r3, r4
 8007028:	9304      	str	r3, [sp, #16]
 800702a:	9307      	str	r3, [sp, #28]
 800702c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007030:	9002      	str	r0, [sp, #8]
 8007032:	9006      	str	r0, [sp, #24]
 8007034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800703a:	ab21      	add	r3, sp, #132	@ 0x84
 800703c:	a902      	add	r1, sp, #8
 800703e:	4628      	mov	r0, r5
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	f000 fa19 	bl	8007478 <_svfiprintf_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	bfbc      	itt	lt
 800704a:	238b      	movlt	r3, #139	@ 0x8b
 800704c:	602b      	strlt	r3, [r5, #0]
 800704e:	2c00      	cmp	r4, #0
 8007050:	d0dd      	beq.n	800700e <sniprintf+0x16>
 8007052:	9b02      	ldr	r3, [sp, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e7d9      	b.n	800700e <sniprintf+0x16>
 800705a:	bf00      	nop
 800705c:	20000024 	.word	0x20000024

08007060 <siprintf>:
 8007060:	b40e      	push	{r1, r2, r3}
 8007062:	b500      	push	{lr}
 8007064:	b09c      	sub	sp, #112	@ 0x70
 8007066:	ab1d      	add	r3, sp, #116	@ 0x74
 8007068:	9002      	str	r0, [sp, #8]
 800706a:	9006      	str	r0, [sp, #24]
 800706c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007070:	4809      	ldr	r0, [pc, #36]	@ (8007098 <siprintf+0x38>)
 8007072:	9107      	str	r1, [sp, #28]
 8007074:	9104      	str	r1, [sp, #16]
 8007076:	4909      	ldr	r1, [pc, #36]	@ (800709c <siprintf+0x3c>)
 8007078:	f853 2b04 	ldr.w	r2, [r3], #4
 800707c:	9105      	str	r1, [sp, #20]
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	a902      	add	r1, sp, #8
 8007084:	f000 f9f8 	bl	8007478 <_svfiprintf_r>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	b01c      	add	sp, #112	@ 0x70
 8007090:	f85d eb04 	ldr.w	lr, [sp], #4
 8007094:	b003      	add	sp, #12
 8007096:	4770      	bx	lr
 8007098:	20000024 	.word	0x20000024
 800709c:	ffff0208 	.word	0xffff0208

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <_reclaim_reent>:
 80070b0:	4b29      	ldr	r3, [pc, #164]	@ (8007158 <_reclaim_reent+0xa8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4283      	cmp	r3, r0
 80070b6:	b570      	push	{r4, r5, r6, lr}
 80070b8:	4604      	mov	r4, r0
 80070ba:	d04b      	beq.n	8007154 <_reclaim_reent+0xa4>
 80070bc:	69c3      	ldr	r3, [r0, #28]
 80070be:	b1ab      	cbz	r3, 80070ec <_reclaim_reent+0x3c>
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	b16b      	cbz	r3, 80070e0 <_reclaim_reent+0x30>
 80070c4:	2500      	movs	r5, #0
 80070c6:	69e3      	ldr	r3, [r4, #28]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	5959      	ldr	r1, [r3, r5]
 80070cc:	2900      	cmp	r1, #0
 80070ce:	d13b      	bne.n	8007148 <_reclaim_reent+0x98>
 80070d0:	3504      	adds	r5, #4
 80070d2:	2d80      	cmp	r5, #128	@ 0x80
 80070d4:	d1f7      	bne.n	80070c6 <_reclaim_reent+0x16>
 80070d6:	69e3      	ldr	r3, [r4, #28]
 80070d8:	4620      	mov	r0, r4
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	f000 f878 	bl	80071d0 <_free_r>
 80070e0:	69e3      	ldr	r3, [r4, #28]
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	b111      	cbz	r1, 80070ec <_reclaim_reent+0x3c>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f872 	bl	80071d0 <_free_r>
 80070ec:	6961      	ldr	r1, [r4, #20]
 80070ee:	b111      	cbz	r1, 80070f6 <_reclaim_reent+0x46>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f86d 	bl	80071d0 <_free_r>
 80070f6:	69e1      	ldr	r1, [r4, #28]
 80070f8:	b111      	cbz	r1, 8007100 <_reclaim_reent+0x50>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f868 	bl	80071d0 <_free_r>
 8007100:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007102:	b111      	cbz	r1, 800710a <_reclaim_reent+0x5a>
 8007104:	4620      	mov	r0, r4
 8007106:	f000 f863 	bl	80071d0 <_free_r>
 800710a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800710c:	b111      	cbz	r1, 8007114 <_reclaim_reent+0x64>
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f85e 	bl	80071d0 <_free_r>
 8007114:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007116:	b111      	cbz	r1, 800711e <_reclaim_reent+0x6e>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 f859 	bl	80071d0 <_free_r>
 800711e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007120:	b111      	cbz	r1, 8007128 <_reclaim_reent+0x78>
 8007122:	4620      	mov	r0, r4
 8007124:	f000 f854 	bl	80071d0 <_free_r>
 8007128:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800712a:	b111      	cbz	r1, 8007132 <_reclaim_reent+0x82>
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f84f 	bl	80071d0 <_free_r>
 8007132:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007134:	b111      	cbz	r1, 800713c <_reclaim_reent+0x8c>
 8007136:	4620      	mov	r0, r4
 8007138:	f000 f84a 	bl	80071d0 <_free_r>
 800713c:	6a23      	ldr	r3, [r4, #32]
 800713e:	b14b      	cbz	r3, 8007154 <_reclaim_reent+0xa4>
 8007140:	4620      	mov	r0, r4
 8007142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007146:	4718      	bx	r3
 8007148:	680e      	ldr	r6, [r1, #0]
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f840 	bl	80071d0 <_free_r>
 8007150:	4631      	mov	r1, r6
 8007152:	e7bb      	b.n	80070cc <_reclaim_reent+0x1c>
 8007154:	bd70      	pop	{r4, r5, r6, pc}
 8007156:	bf00      	nop
 8007158:	20000024 	.word	0x20000024

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	@ (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000024 	.word	0x20000024

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	@ (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	@ (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	@ (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	@ (80071ac <__libc_init_array+0x44>)
 800717c:	f000 fc66 	bl	8007a4c <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	08009c08 	.word	0x08009c08
 80071a4:	08009c08 	.word	0x08009c08
 80071a8:	08009c08 	.word	0x08009c08
 80071ac:	08009c0c 	.word	0x08009c0c

080071b0 <__retarget_lock_acquire_recursive>:
 80071b0:	4770      	bx	lr

080071b2 <__retarget_lock_release_recursive>:
 80071b2:	4770      	bx	lr

080071b4 <memcpy>:
 80071b4:	440a      	add	r2, r1
 80071b6:	4291      	cmp	r1, r2
 80071b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071bc:	d100      	bne.n	80071c0 <memcpy+0xc>
 80071be:	4770      	bx	lr
 80071c0:	b510      	push	{r4, lr}
 80071c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ca:	4291      	cmp	r1, r2
 80071cc:	d1f9      	bne.n	80071c2 <memcpy+0xe>
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <_free_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d041      	beq.n	800725c <_free_r+0x8c>
 80071d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071dc:	1f0c      	subs	r4, r1, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfb8      	it	lt
 80071e2:	18e4      	addlt	r4, r4, r3
 80071e4:	f000 f8e0 	bl	80073a8 <__malloc_lock>
 80071e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <_free_r+0x90>)
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	b933      	cbnz	r3, 80071fc <_free_r+0x2c>
 80071ee:	6063      	str	r3, [r4, #4]
 80071f0:	6014      	str	r4, [r2, #0]
 80071f2:	4628      	mov	r0, r5
 80071f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f8:	f000 b8dc 	b.w	80073b4 <__malloc_unlock>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d908      	bls.n	8007212 <_free_r+0x42>
 8007200:	6820      	ldr	r0, [r4, #0]
 8007202:	1821      	adds	r1, r4, r0
 8007204:	428b      	cmp	r3, r1
 8007206:	bf01      	itttt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	e7ed      	b.n	80071ee <_free_r+0x1e>
 8007212:	461a      	mov	r2, r3
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b10b      	cbz	r3, 800721c <_free_r+0x4c>
 8007218:	42a3      	cmp	r3, r4
 800721a:	d9fa      	bls.n	8007212 <_free_r+0x42>
 800721c:	6811      	ldr	r1, [r2, #0]
 800721e:	1850      	adds	r0, r2, r1
 8007220:	42a0      	cmp	r0, r4
 8007222:	d10b      	bne.n	800723c <_free_r+0x6c>
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	4401      	add	r1, r0
 8007228:	1850      	adds	r0, r2, r1
 800722a:	4283      	cmp	r3, r0
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	d1e0      	bne.n	80071f2 <_free_r+0x22>
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	6053      	str	r3, [r2, #4]
 8007236:	4408      	add	r0, r1
 8007238:	6010      	str	r0, [r2, #0]
 800723a:	e7da      	b.n	80071f2 <_free_r+0x22>
 800723c:	d902      	bls.n	8007244 <_free_r+0x74>
 800723e:	230c      	movs	r3, #12
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	e7d6      	b.n	80071f2 <_free_r+0x22>
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	1821      	adds	r1, r4, r0
 8007248:	428b      	cmp	r3, r1
 800724a:	bf04      	itt	eq
 800724c:	6819      	ldreq	r1, [r3, #0]
 800724e:	685b      	ldreq	r3, [r3, #4]
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	bf04      	itt	eq
 8007254:	1809      	addeq	r1, r1, r0
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	6054      	str	r4, [r2, #4]
 800725a:	e7ca      	b.n	80071f2 <_free_r+0x22>
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	200050d4 	.word	0x200050d4

08007264 <sbrk_aligned>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4e0f      	ldr	r6, [pc, #60]	@ (80072a4 <sbrk_aligned+0x40>)
 8007268:	460c      	mov	r4, r1
 800726a:	6831      	ldr	r1, [r6, #0]
 800726c:	4605      	mov	r5, r0
 800726e:	b911      	cbnz	r1, 8007276 <sbrk_aligned+0x12>
 8007270:	f000 fba6 	bl	80079c0 <_sbrk_r>
 8007274:	6030      	str	r0, [r6, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 fba1 	bl	80079c0 <_sbrk_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d103      	bne.n	800728a <sbrk_aligned+0x26>
 8007282:	f04f 34ff 	mov.w	r4, #4294967295
 8007286:	4620      	mov	r0, r4
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d0f8      	beq.n	8007286 <sbrk_aligned+0x22>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fb92 	bl	80079c0 <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d1f2      	bne.n	8007286 <sbrk_aligned+0x22>
 80072a0:	e7ef      	b.n	8007282 <sbrk_aligned+0x1e>
 80072a2:	bf00      	nop
 80072a4:	200050d0 	.word	0x200050d0

080072a8 <_malloc_r>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	1ccd      	adds	r5, r1, #3
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	4606      	mov	r6, r0
 80072be:	db01      	blt.n	80072c4 <_malloc_r+0x1c>
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d904      	bls.n	80072ce <_malloc_r+0x26>
 80072c4:	230c      	movs	r3, #12
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	2000      	movs	r0, #0
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073a4 <_malloc_r+0xfc>
 80072d2:	f000 f869 	bl	80073a8 <__malloc_lock>
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	461c      	mov	r4, r3
 80072dc:	bb44      	cbnz	r4, 8007330 <_malloc_r+0x88>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ffbf 	bl	8007264 <sbrk_aligned>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	4604      	mov	r4, r0
 80072ea:	d158      	bne.n	800739e <_malloc_r+0xf6>
 80072ec:	f8d8 4000 	ldr.w	r4, [r8]
 80072f0:	4627      	mov	r7, r4
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d143      	bne.n	800737e <_malloc_r+0xd6>
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d04b      	beq.n	8007392 <_malloc_r+0xea>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4639      	mov	r1, r7
 80072fe:	4630      	mov	r0, r6
 8007300:	eb04 0903 	add.w	r9, r4, r3
 8007304:	f000 fb5c 	bl	80079c0 <_sbrk_r>
 8007308:	4581      	cmp	r9, r0
 800730a:	d142      	bne.n	8007392 <_malloc_r+0xea>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	1a6d      	subs	r5, r5, r1
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ffa6 	bl	8007264 <sbrk_aligned>
 8007318:	3001      	adds	r0, #1
 800731a:	d03a      	beq.n	8007392 <_malloc_r+0xea>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	442b      	add	r3, r5
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	f8d8 3000 	ldr.w	r3, [r8]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	bb62      	cbnz	r2, 8007384 <_malloc_r+0xdc>
 800732a:	f8c8 7000 	str.w	r7, [r8]
 800732e:	e00f      	b.n	8007350 <_malloc_r+0xa8>
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	1b52      	subs	r2, r2, r5
 8007334:	d420      	bmi.n	8007378 <_malloc_r+0xd0>
 8007336:	2a0b      	cmp	r2, #11
 8007338:	d917      	bls.n	800736a <_malloc_r+0xc2>
 800733a:	1961      	adds	r1, r4, r5
 800733c:	42a3      	cmp	r3, r4
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	bf18      	it	ne
 8007342:	6059      	strne	r1, [r3, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	bf08      	it	eq
 8007348:	f8c8 1000 	streq.w	r1, [r8]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f82f 	bl	80073b4 <__malloc_unlock>
 8007356:	f104 000b 	add.w	r0, r4, #11
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	f020 0007 	bic.w	r0, r0, #7
 8007360:	1ac2      	subs	r2, r0, r3
 8007362:	bf1c      	itt	ne
 8007364:	1a1b      	subne	r3, r3, r0
 8007366:	50a3      	strne	r3, [r4, r2]
 8007368:	e7af      	b.n	80072ca <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	f8c8 2000 	streq.w	r2, [r8]
 8007374:	605a      	strne	r2, [r3, #4]
 8007376:	e7eb      	b.n	8007350 <_malloc_r+0xa8>
 8007378:	4623      	mov	r3, r4
 800737a:	6864      	ldr	r4, [r4, #4]
 800737c:	e7ae      	b.n	80072dc <_malloc_r+0x34>
 800737e:	463c      	mov	r4, r7
 8007380:	687f      	ldr	r7, [r7, #4]
 8007382:	e7b6      	b.n	80072f2 <_malloc_r+0x4a>
 8007384:	461a      	mov	r2, r3
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1fb      	bne.n	8007384 <_malloc_r+0xdc>
 800738c:	2300      	movs	r3, #0
 800738e:	6053      	str	r3, [r2, #4]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa8>
 8007392:	230c      	movs	r3, #12
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f80c 	bl	80073b4 <__malloc_unlock>
 800739c:	e794      	b.n	80072c8 <_malloc_r+0x20>
 800739e:	6005      	str	r5, [r0, #0]
 80073a0:	e7d6      	b.n	8007350 <_malloc_r+0xa8>
 80073a2:	bf00      	nop
 80073a4:	200050d4 	.word	0x200050d4

080073a8 <__malloc_lock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	@ (80073b0 <__malloc_lock+0x8>)
 80073aa:	f7ff bf01 	b.w	80071b0 <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	200050cc 	.word	0x200050cc

080073b4 <__malloc_unlock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	@ (80073bc <__malloc_unlock+0x8>)
 80073b6:	f7ff befc 	b.w	80071b2 <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	200050cc 	.word	0x200050cc

080073c0 <__ssputs_r>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	688e      	ldr	r6, [r1, #8]
 80073c6:	461f      	mov	r7, r3
 80073c8:	42be      	cmp	r6, r7
 80073ca:	680b      	ldr	r3, [r1, #0]
 80073cc:	4682      	mov	sl, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	4690      	mov	r8, r2
 80073d2:	d82d      	bhi.n	8007430 <__ssputs_r+0x70>
 80073d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80073dc:	d026      	beq.n	800742c <__ssputs_r+0x6c>
 80073de:	6965      	ldr	r5, [r4, #20]
 80073e0:	6909      	ldr	r1, [r1, #16]
 80073e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073e6:	eba3 0901 	sub.w	r9, r3, r1
 80073ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073ee:	1c7b      	adds	r3, r7, #1
 80073f0:	444b      	add	r3, r9
 80073f2:	106d      	asrs	r5, r5, #1
 80073f4:	429d      	cmp	r5, r3
 80073f6:	bf38      	it	cc
 80073f8:	461d      	movcc	r5, r3
 80073fa:	0553      	lsls	r3, r2, #21
 80073fc:	d527      	bpl.n	800744e <__ssputs_r+0x8e>
 80073fe:	4629      	mov	r1, r5
 8007400:	f7ff ff52 	bl	80072a8 <_malloc_r>
 8007404:	4606      	mov	r6, r0
 8007406:	b360      	cbz	r0, 8007462 <__ssputs_r+0xa2>
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	464a      	mov	r2, r9
 800740c:	f7ff fed2 	bl	80071b4 <memcpy>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	6126      	str	r6, [r4, #16]
 800741e:	6165      	str	r5, [r4, #20]
 8007420:	444e      	add	r6, r9
 8007422:	eba5 0509 	sub.w	r5, r5, r9
 8007426:	6026      	str	r6, [r4, #0]
 8007428:	60a5      	str	r5, [r4, #8]
 800742a:	463e      	mov	r6, r7
 800742c:	42be      	cmp	r6, r7
 800742e:	d900      	bls.n	8007432 <__ssputs_r+0x72>
 8007430:	463e      	mov	r6, r7
 8007432:	6820      	ldr	r0, [r4, #0]
 8007434:	4632      	mov	r2, r6
 8007436:	4641      	mov	r1, r8
 8007438:	f000 faa8 	bl	800798c <memmove>
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	1b9b      	subs	r3, r3, r6
 8007440:	60a3      	str	r3, [r4, #8]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	4433      	add	r3, r6
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	2000      	movs	r0, #0
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744e:	462a      	mov	r2, r5
 8007450:	f000 fac6 	bl	80079e0 <_realloc_r>
 8007454:	4606      	mov	r6, r0
 8007456:	2800      	cmp	r0, #0
 8007458:	d1e0      	bne.n	800741c <__ssputs_r+0x5c>
 800745a:	6921      	ldr	r1, [r4, #16]
 800745c:	4650      	mov	r0, sl
 800745e:	f7ff feb7 	bl	80071d0 <_free_r>
 8007462:	230c      	movs	r3, #12
 8007464:	f8ca 3000 	str.w	r3, [sl]
 8007468:	89a3      	ldrh	r3, [r4, #12]
 800746a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800746e:	81a3      	strh	r3, [r4, #12]
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	e7e9      	b.n	800744a <__ssputs_r+0x8a>
	...

08007478 <_svfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	4698      	mov	r8, r3
 800747e:	898b      	ldrh	r3, [r1, #12]
 8007480:	061b      	lsls	r3, r3, #24
 8007482:	b09d      	sub	sp, #116	@ 0x74
 8007484:	4607      	mov	r7, r0
 8007486:	460d      	mov	r5, r1
 8007488:	4614      	mov	r4, r2
 800748a:	d510      	bpl.n	80074ae <_svfiprintf_r+0x36>
 800748c:	690b      	ldr	r3, [r1, #16]
 800748e:	b973      	cbnz	r3, 80074ae <_svfiprintf_r+0x36>
 8007490:	2140      	movs	r1, #64	@ 0x40
 8007492:	f7ff ff09 	bl	80072a8 <_malloc_r>
 8007496:	6028      	str	r0, [r5, #0]
 8007498:	6128      	str	r0, [r5, #16]
 800749a:	b930      	cbnz	r0, 80074aa <_svfiprintf_r+0x32>
 800749c:	230c      	movs	r3, #12
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	b01d      	add	sp, #116	@ 0x74
 80074a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074aa:	2340      	movs	r3, #64	@ 0x40
 80074ac:	616b      	str	r3, [r5, #20]
 80074ae:	2300      	movs	r3, #0
 80074b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b2:	2320      	movs	r3, #32
 80074b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074bc:	2330      	movs	r3, #48	@ 0x30
 80074be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800765c <_svfiprintf_r+0x1e4>
 80074c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074c6:	f04f 0901 	mov.w	r9, #1
 80074ca:	4623      	mov	r3, r4
 80074cc:	469a      	mov	sl, r3
 80074ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d2:	b10a      	cbz	r2, 80074d8 <_svfiprintf_r+0x60>
 80074d4:	2a25      	cmp	r2, #37	@ 0x25
 80074d6:	d1f9      	bne.n	80074cc <_svfiprintf_r+0x54>
 80074d8:	ebba 0b04 	subs.w	fp, sl, r4
 80074dc:	d00b      	beq.n	80074f6 <_svfiprintf_r+0x7e>
 80074de:	465b      	mov	r3, fp
 80074e0:	4622      	mov	r2, r4
 80074e2:	4629      	mov	r1, r5
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff ff6b 	bl	80073c0 <__ssputs_r>
 80074ea:	3001      	adds	r0, #1
 80074ec:	f000 80a7 	beq.w	800763e <_svfiprintf_r+0x1c6>
 80074f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f2:	445a      	add	r2, fp
 80074f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80074f6:	f89a 3000 	ldrb.w	r3, [sl]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 809f 	beq.w	800763e <_svfiprintf_r+0x1c6>
 8007500:	2300      	movs	r3, #0
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800750a:	f10a 0a01 	add.w	sl, sl, #1
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	9307      	str	r3, [sp, #28]
 8007512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007516:	931a      	str	r3, [sp, #104]	@ 0x68
 8007518:	4654      	mov	r4, sl
 800751a:	2205      	movs	r2, #5
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	484e      	ldr	r0, [pc, #312]	@ (800765c <_svfiprintf_r+0x1e4>)
 8007522:	f7f8 fe7d 	bl	8000220 <memchr>
 8007526:	9a04      	ldr	r2, [sp, #16]
 8007528:	b9d8      	cbnz	r0, 8007562 <_svfiprintf_r+0xea>
 800752a:	06d0      	lsls	r0, r2, #27
 800752c:	bf44      	itt	mi
 800752e:	2320      	movmi	r3, #32
 8007530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007534:	0711      	lsls	r1, r2, #28
 8007536:	bf44      	itt	mi
 8007538:	232b      	movmi	r3, #43	@ 0x2b
 800753a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800753e:	f89a 3000 	ldrb.w	r3, [sl]
 8007542:	2b2a      	cmp	r3, #42	@ 0x2a
 8007544:	d015      	beq.n	8007572 <_svfiprintf_r+0xfa>
 8007546:	9a07      	ldr	r2, [sp, #28]
 8007548:	4654      	mov	r4, sl
 800754a:	2000      	movs	r0, #0
 800754c:	f04f 0c0a 	mov.w	ip, #10
 8007550:	4621      	mov	r1, r4
 8007552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007556:	3b30      	subs	r3, #48	@ 0x30
 8007558:	2b09      	cmp	r3, #9
 800755a:	d94b      	bls.n	80075f4 <_svfiprintf_r+0x17c>
 800755c:	b1b0      	cbz	r0, 800758c <_svfiprintf_r+0x114>
 800755e:	9207      	str	r2, [sp, #28]
 8007560:	e014      	b.n	800758c <_svfiprintf_r+0x114>
 8007562:	eba0 0308 	sub.w	r3, r0, r8
 8007566:	fa09 f303 	lsl.w	r3, r9, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	46a2      	mov	sl, r4
 8007570:	e7d2      	b.n	8007518 <_svfiprintf_r+0xa0>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	1d19      	adds	r1, r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	9103      	str	r1, [sp, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfbb      	ittet	lt
 800757e:	425b      	neglt	r3, r3
 8007580:	f042 0202 	orrlt.w	r2, r2, #2
 8007584:	9307      	strge	r3, [sp, #28]
 8007586:	9307      	strlt	r3, [sp, #28]
 8007588:	bfb8      	it	lt
 800758a:	9204      	strlt	r2, [sp, #16]
 800758c:	7823      	ldrb	r3, [r4, #0]
 800758e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007590:	d10a      	bne.n	80075a8 <_svfiprintf_r+0x130>
 8007592:	7863      	ldrb	r3, [r4, #1]
 8007594:	2b2a      	cmp	r3, #42	@ 0x2a
 8007596:	d132      	bne.n	80075fe <_svfiprintf_r+0x186>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	1d1a      	adds	r2, r3, #4
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	9203      	str	r2, [sp, #12]
 80075a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075a4:	3402      	adds	r4, #2
 80075a6:	9305      	str	r3, [sp, #20]
 80075a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800766c <_svfiprintf_r+0x1f4>
 80075ac:	7821      	ldrb	r1, [r4, #0]
 80075ae:	2203      	movs	r2, #3
 80075b0:	4650      	mov	r0, sl
 80075b2:	f7f8 fe35 	bl	8000220 <memchr>
 80075b6:	b138      	cbz	r0, 80075c8 <_svfiprintf_r+0x150>
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	eba0 000a 	sub.w	r0, r0, sl
 80075be:	2240      	movs	r2, #64	@ 0x40
 80075c0:	4082      	lsls	r2, r0
 80075c2:	4313      	orrs	r3, r2
 80075c4:	3401      	adds	r4, #1
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075cc:	4824      	ldr	r0, [pc, #144]	@ (8007660 <_svfiprintf_r+0x1e8>)
 80075ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075d2:	2206      	movs	r2, #6
 80075d4:	f7f8 fe24 	bl	8000220 <memchr>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d036      	beq.n	800764a <_svfiprintf_r+0x1d2>
 80075dc:	4b21      	ldr	r3, [pc, #132]	@ (8007664 <_svfiprintf_r+0x1ec>)
 80075de:	bb1b      	cbnz	r3, 8007628 <_svfiprintf_r+0x1b0>
 80075e0:	9b03      	ldr	r3, [sp, #12]
 80075e2:	3307      	adds	r3, #7
 80075e4:	f023 0307 	bic.w	r3, r3, #7
 80075e8:	3308      	adds	r3, #8
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ee:	4433      	add	r3, r6
 80075f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f2:	e76a      	b.n	80074ca <_svfiprintf_r+0x52>
 80075f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075f8:	460c      	mov	r4, r1
 80075fa:	2001      	movs	r0, #1
 80075fc:	e7a8      	b.n	8007550 <_svfiprintf_r+0xd8>
 80075fe:	2300      	movs	r3, #0
 8007600:	3401      	adds	r4, #1
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	4619      	mov	r1, r3
 8007606:	f04f 0c0a 	mov.w	ip, #10
 800760a:	4620      	mov	r0, r4
 800760c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007610:	3a30      	subs	r2, #48	@ 0x30
 8007612:	2a09      	cmp	r2, #9
 8007614:	d903      	bls.n	800761e <_svfiprintf_r+0x1a6>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0c6      	beq.n	80075a8 <_svfiprintf_r+0x130>
 800761a:	9105      	str	r1, [sp, #20]
 800761c:	e7c4      	b.n	80075a8 <_svfiprintf_r+0x130>
 800761e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007622:	4604      	mov	r4, r0
 8007624:	2301      	movs	r3, #1
 8007626:	e7f0      	b.n	800760a <_svfiprintf_r+0x192>
 8007628:	ab03      	add	r3, sp, #12
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	462a      	mov	r2, r5
 800762e:	4b0e      	ldr	r3, [pc, #56]	@ (8007668 <_svfiprintf_r+0x1f0>)
 8007630:	a904      	add	r1, sp, #16
 8007632:	4638      	mov	r0, r7
 8007634:	f3af 8000 	nop.w
 8007638:	1c42      	adds	r2, r0, #1
 800763a:	4606      	mov	r6, r0
 800763c:	d1d6      	bne.n	80075ec <_svfiprintf_r+0x174>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	065b      	lsls	r3, r3, #25
 8007642:	f53f af2d 	bmi.w	80074a0 <_svfiprintf_r+0x28>
 8007646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007648:	e72c      	b.n	80074a4 <_svfiprintf_r+0x2c>
 800764a:	ab03      	add	r3, sp, #12
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	462a      	mov	r2, r5
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <_svfiprintf_r+0x1f0>)
 8007652:	a904      	add	r1, sp, #16
 8007654:	4638      	mov	r0, r7
 8007656:	f000 f879 	bl	800774c <_printf_i>
 800765a:	e7ed      	b.n	8007638 <_svfiprintf_r+0x1c0>
 800765c:	08009bcc 	.word	0x08009bcc
 8007660:	08009bd6 	.word	0x08009bd6
 8007664:	00000000 	.word	0x00000000
 8007668:	080073c1 	.word	0x080073c1
 800766c:	08009bd2 	.word	0x08009bd2

08007670 <_printf_common>:
 8007670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	4616      	mov	r6, r2
 8007676:	4698      	mov	r8, r3
 8007678:	688a      	ldr	r2, [r1, #8]
 800767a:	690b      	ldr	r3, [r1, #16]
 800767c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007680:	4293      	cmp	r3, r2
 8007682:	bfb8      	it	lt
 8007684:	4613      	movlt	r3, r2
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800768c:	4607      	mov	r7, r0
 800768e:	460c      	mov	r4, r1
 8007690:	b10a      	cbz	r2, 8007696 <_printf_common+0x26>
 8007692:	3301      	adds	r3, #1
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	0699      	lsls	r1, r3, #26
 800769a:	bf42      	ittt	mi
 800769c:	6833      	ldrmi	r3, [r6, #0]
 800769e:	3302      	addmi	r3, #2
 80076a0:	6033      	strmi	r3, [r6, #0]
 80076a2:	6825      	ldr	r5, [r4, #0]
 80076a4:	f015 0506 	ands.w	r5, r5, #6
 80076a8:	d106      	bne.n	80076b8 <_printf_common+0x48>
 80076aa:	f104 0a19 	add.w	sl, r4, #25
 80076ae:	68e3      	ldr	r3, [r4, #12]
 80076b0:	6832      	ldr	r2, [r6, #0]
 80076b2:	1a9b      	subs	r3, r3, r2
 80076b4:	42ab      	cmp	r3, r5
 80076b6:	dc26      	bgt.n	8007706 <_printf_common+0x96>
 80076b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076bc:	6822      	ldr	r2, [r4, #0]
 80076be:	3b00      	subs	r3, #0
 80076c0:	bf18      	it	ne
 80076c2:	2301      	movne	r3, #1
 80076c4:	0692      	lsls	r2, r2, #26
 80076c6:	d42b      	bmi.n	8007720 <_printf_common+0xb0>
 80076c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076cc:	4641      	mov	r1, r8
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c8      	blx	r9
 80076d2:	3001      	adds	r0, #1
 80076d4:	d01e      	beq.n	8007714 <_printf_common+0xa4>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	6922      	ldr	r2, [r4, #16]
 80076da:	f003 0306 	and.w	r3, r3, #6
 80076de:	2b04      	cmp	r3, #4
 80076e0:	bf02      	ittt	eq
 80076e2:	68e5      	ldreq	r5, [r4, #12]
 80076e4:	6833      	ldreq	r3, [r6, #0]
 80076e6:	1aed      	subeq	r5, r5, r3
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	bf0c      	ite	eq
 80076ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f0:	2500      	movne	r5, #0
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bfc4      	itt	gt
 80076f6:	1a9b      	subgt	r3, r3, r2
 80076f8:	18ed      	addgt	r5, r5, r3
 80076fa:	2600      	movs	r6, #0
 80076fc:	341a      	adds	r4, #26
 80076fe:	42b5      	cmp	r5, r6
 8007700:	d11a      	bne.n	8007738 <_printf_common+0xc8>
 8007702:	2000      	movs	r0, #0
 8007704:	e008      	b.n	8007718 <_printf_common+0xa8>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4641      	mov	r1, r8
 800770c:	4638      	mov	r0, r7
 800770e:	47c8      	blx	r9
 8007710:	3001      	adds	r0, #1
 8007712:	d103      	bne.n	800771c <_printf_common+0xac>
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771c:	3501      	adds	r5, #1
 800771e:	e7c6      	b.n	80076ae <_printf_common+0x3e>
 8007720:	18e1      	adds	r1, r4, r3
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	2030      	movs	r0, #48	@ 0x30
 8007726:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800772a:	4422      	add	r2, r4
 800772c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007730:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007734:	3302      	adds	r3, #2
 8007736:	e7c7      	b.n	80076c8 <_printf_common+0x58>
 8007738:	2301      	movs	r3, #1
 800773a:	4622      	mov	r2, r4
 800773c:	4641      	mov	r1, r8
 800773e:	4638      	mov	r0, r7
 8007740:	47c8      	blx	r9
 8007742:	3001      	adds	r0, #1
 8007744:	d0e6      	beq.n	8007714 <_printf_common+0xa4>
 8007746:	3601      	adds	r6, #1
 8007748:	e7d9      	b.n	80076fe <_printf_common+0x8e>
	...

0800774c <_printf_i>:
 800774c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	7e0f      	ldrb	r7, [r1, #24]
 8007752:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007754:	2f78      	cmp	r7, #120	@ 0x78
 8007756:	4691      	mov	r9, r2
 8007758:	4680      	mov	r8, r0
 800775a:	460c      	mov	r4, r1
 800775c:	469a      	mov	sl, r3
 800775e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007762:	d807      	bhi.n	8007774 <_printf_i+0x28>
 8007764:	2f62      	cmp	r7, #98	@ 0x62
 8007766:	d80a      	bhi.n	800777e <_printf_i+0x32>
 8007768:	2f00      	cmp	r7, #0
 800776a:	f000 80d2 	beq.w	8007912 <_printf_i+0x1c6>
 800776e:	2f58      	cmp	r7, #88	@ 0x58
 8007770:	f000 80b9 	beq.w	80078e6 <_printf_i+0x19a>
 8007774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007778:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800777c:	e03a      	b.n	80077f4 <_printf_i+0xa8>
 800777e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007782:	2b15      	cmp	r3, #21
 8007784:	d8f6      	bhi.n	8007774 <_printf_i+0x28>
 8007786:	a101      	add	r1, pc, #4	@ (adr r1, 800778c <_printf_i+0x40>)
 8007788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800778c:	080077e5 	.word	0x080077e5
 8007790:	080077f9 	.word	0x080077f9
 8007794:	08007775 	.word	0x08007775
 8007798:	08007775 	.word	0x08007775
 800779c:	08007775 	.word	0x08007775
 80077a0:	08007775 	.word	0x08007775
 80077a4:	080077f9 	.word	0x080077f9
 80077a8:	08007775 	.word	0x08007775
 80077ac:	08007775 	.word	0x08007775
 80077b0:	08007775 	.word	0x08007775
 80077b4:	08007775 	.word	0x08007775
 80077b8:	080078f9 	.word	0x080078f9
 80077bc:	08007823 	.word	0x08007823
 80077c0:	080078b3 	.word	0x080078b3
 80077c4:	08007775 	.word	0x08007775
 80077c8:	08007775 	.word	0x08007775
 80077cc:	0800791b 	.word	0x0800791b
 80077d0:	08007775 	.word	0x08007775
 80077d4:	08007823 	.word	0x08007823
 80077d8:	08007775 	.word	0x08007775
 80077dc:	08007775 	.word	0x08007775
 80077e0:	080078bb 	.word	0x080078bb
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6032      	str	r2, [r6, #0]
 80077ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077f4:	2301      	movs	r3, #1
 80077f6:	e09d      	b.n	8007934 <_printf_i+0x1e8>
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	1d19      	adds	r1, r3, #4
 80077fe:	6031      	str	r1, [r6, #0]
 8007800:	0606      	lsls	r6, r0, #24
 8007802:	d501      	bpl.n	8007808 <_printf_i+0xbc>
 8007804:	681d      	ldr	r5, [r3, #0]
 8007806:	e003      	b.n	8007810 <_printf_i+0xc4>
 8007808:	0645      	lsls	r5, r0, #25
 800780a:	d5fb      	bpl.n	8007804 <_printf_i+0xb8>
 800780c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007810:	2d00      	cmp	r5, #0
 8007812:	da03      	bge.n	800781c <_printf_i+0xd0>
 8007814:	232d      	movs	r3, #45	@ 0x2d
 8007816:	426d      	negs	r5, r5
 8007818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800781c:	4859      	ldr	r0, [pc, #356]	@ (8007984 <_printf_i+0x238>)
 800781e:	230a      	movs	r3, #10
 8007820:	e011      	b.n	8007846 <_printf_i+0xfa>
 8007822:	6821      	ldr	r1, [r4, #0]
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	0608      	lsls	r0, r1, #24
 8007828:	f853 5b04 	ldr.w	r5, [r3], #4
 800782c:	d402      	bmi.n	8007834 <_printf_i+0xe8>
 800782e:	0649      	lsls	r1, r1, #25
 8007830:	bf48      	it	mi
 8007832:	b2ad      	uxthmi	r5, r5
 8007834:	2f6f      	cmp	r7, #111	@ 0x6f
 8007836:	4853      	ldr	r0, [pc, #332]	@ (8007984 <_printf_i+0x238>)
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	bf14      	ite	ne
 800783c:	230a      	movne	r3, #10
 800783e:	2308      	moveq	r3, #8
 8007840:	2100      	movs	r1, #0
 8007842:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007846:	6866      	ldr	r6, [r4, #4]
 8007848:	60a6      	str	r6, [r4, #8]
 800784a:	2e00      	cmp	r6, #0
 800784c:	bfa2      	ittt	ge
 800784e:	6821      	ldrge	r1, [r4, #0]
 8007850:	f021 0104 	bicge.w	r1, r1, #4
 8007854:	6021      	strge	r1, [r4, #0]
 8007856:	b90d      	cbnz	r5, 800785c <_printf_i+0x110>
 8007858:	2e00      	cmp	r6, #0
 800785a:	d04b      	beq.n	80078f4 <_printf_i+0x1a8>
 800785c:	4616      	mov	r6, r2
 800785e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007862:	fb03 5711 	mls	r7, r3, r1, r5
 8007866:	5dc7      	ldrb	r7, [r0, r7]
 8007868:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800786c:	462f      	mov	r7, r5
 800786e:	42bb      	cmp	r3, r7
 8007870:	460d      	mov	r5, r1
 8007872:	d9f4      	bls.n	800785e <_printf_i+0x112>
 8007874:	2b08      	cmp	r3, #8
 8007876:	d10b      	bne.n	8007890 <_printf_i+0x144>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	07df      	lsls	r7, r3, #31
 800787c:	d508      	bpl.n	8007890 <_printf_i+0x144>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6861      	ldr	r1, [r4, #4]
 8007882:	4299      	cmp	r1, r3
 8007884:	bfde      	ittt	le
 8007886:	2330      	movle	r3, #48	@ 0x30
 8007888:	f806 3c01 	strble.w	r3, [r6, #-1]
 800788c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007890:	1b92      	subs	r2, r2, r6
 8007892:	6122      	str	r2, [r4, #16]
 8007894:	f8cd a000 	str.w	sl, [sp]
 8007898:	464b      	mov	r3, r9
 800789a:	aa03      	add	r2, sp, #12
 800789c:	4621      	mov	r1, r4
 800789e:	4640      	mov	r0, r8
 80078a0:	f7ff fee6 	bl	8007670 <_printf_common>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d14a      	bne.n	800793e <_printf_i+0x1f2>
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ac:	b004      	add	sp, #16
 80078ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	f043 0320 	orr.w	r3, r3, #32
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	4833      	ldr	r0, [pc, #204]	@ (8007988 <_printf_i+0x23c>)
 80078bc:	2778      	movs	r7, #120	@ 0x78
 80078be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	6831      	ldr	r1, [r6, #0]
 80078c6:	061f      	lsls	r7, r3, #24
 80078c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80078cc:	d402      	bmi.n	80078d4 <_printf_i+0x188>
 80078ce:	065f      	lsls	r7, r3, #25
 80078d0:	bf48      	it	mi
 80078d2:	b2ad      	uxthmi	r5, r5
 80078d4:	6031      	str	r1, [r6, #0]
 80078d6:	07d9      	lsls	r1, r3, #31
 80078d8:	bf44      	itt	mi
 80078da:	f043 0320 	orrmi.w	r3, r3, #32
 80078de:	6023      	strmi	r3, [r4, #0]
 80078e0:	b11d      	cbz	r5, 80078ea <_printf_i+0x19e>
 80078e2:	2310      	movs	r3, #16
 80078e4:	e7ac      	b.n	8007840 <_printf_i+0xf4>
 80078e6:	4827      	ldr	r0, [pc, #156]	@ (8007984 <_printf_i+0x238>)
 80078e8:	e7e9      	b.n	80078be <_printf_i+0x172>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	f023 0320 	bic.w	r3, r3, #32
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	e7f6      	b.n	80078e2 <_printf_i+0x196>
 80078f4:	4616      	mov	r6, r2
 80078f6:	e7bd      	b.n	8007874 <_printf_i+0x128>
 80078f8:	6833      	ldr	r3, [r6, #0]
 80078fa:	6825      	ldr	r5, [r4, #0]
 80078fc:	6961      	ldr	r1, [r4, #20]
 80078fe:	1d18      	adds	r0, r3, #4
 8007900:	6030      	str	r0, [r6, #0]
 8007902:	062e      	lsls	r6, r5, #24
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	d501      	bpl.n	800790c <_printf_i+0x1c0>
 8007908:	6019      	str	r1, [r3, #0]
 800790a:	e002      	b.n	8007912 <_printf_i+0x1c6>
 800790c:	0668      	lsls	r0, r5, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0x1bc>
 8007910:	8019      	strh	r1, [r3, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	4616      	mov	r6, r2
 8007918:	e7bc      	b.n	8007894 <_printf_i+0x148>
 800791a:	6833      	ldr	r3, [r6, #0]
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	6032      	str	r2, [r6, #0]
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	6862      	ldr	r2, [r4, #4]
 8007924:	2100      	movs	r1, #0
 8007926:	4630      	mov	r0, r6
 8007928:	f7f8 fc7a 	bl	8000220 <memchr>
 800792c:	b108      	cbz	r0, 8007932 <_printf_i+0x1e6>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	6060      	str	r0, [r4, #4]
 8007932:	6863      	ldr	r3, [r4, #4]
 8007934:	6123      	str	r3, [r4, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800793c:	e7aa      	b.n	8007894 <_printf_i+0x148>
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	4632      	mov	r2, r6
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	47d0      	blx	sl
 8007948:	3001      	adds	r0, #1
 800794a:	d0ad      	beq.n	80078a8 <_printf_i+0x15c>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	d413      	bmi.n	800797a <_printf_i+0x22e>
 8007952:	68e0      	ldr	r0, [r4, #12]
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	4298      	cmp	r0, r3
 8007958:	bfb8      	it	lt
 800795a:	4618      	movlt	r0, r3
 800795c:	e7a6      	b.n	80078ac <_printf_i+0x160>
 800795e:	2301      	movs	r3, #1
 8007960:	4632      	mov	r2, r6
 8007962:	4649      	mov	r1, r9
 8007964:	4640      	mov	r0, r8
 8007966:	47d0      	blx	sl
 8007968:	3001      	adds	r0, #1
 800796a:	d09d      	beq.n	80078a8 <_printf_i+0x15c>
 800796c:	3501      	adds	r5, #1
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	9903      	ldr	r1, [sp, #12]
 8007972:	1a5b      	subs	r3, r3, r1
 8007974:	42ab      	cmp	r3, r5
 8007976:	dcf2      	bgt.n	800795e <_printf_i+0x212>
 8007978:	e7eb      	b.n	8007952 <_printf_i+0x206>
 800797a:	2500      	movs	r5, #0
 800797c:	f104 0619 	add.w	r6, r4, #25
 8007980:	e7f5      	b.n	800796e <_printf_i+0x222>
 8007982:	bf00      	nop
 8007984:	08009bdd 	.word	0x08009bdd
 8007988:	08009bee 	.word	0x08009bee

0800798c <memmove>:
 800798c:	4288      	cmp	r0, r1
 800798e:	b510      	push	{r4, lr}
 8007990:	eb01 0402 	add.w	r4, r1, r2
 8007994:	d902      	bls.n	800799c <memmove+0x10>
 8007996:	4284      	cmp	r4, r0
 8007998:	4623      	mov	r3, r4
 800799a:	d807      	bhi.n	80079ac <memmove+0x20>
 800799c:	1e43      	subs	r3, r0, #1
 800799e:	42a1      	cmp	r1, r4
 80079a0:	d008      	beq.n	80079b4 <memmove+0x28>
 80079a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0x12>
 80079ac:	4402      	add	r2, r0
 80079ae:	4601      	mov	r1, r0
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d100      	bne.n	80079b6 <memmove+0x2a>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079be:	e7f7      	b.n	80079b0 <memmove+0x24>

080079c0 <_sbrk_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d06      	ldr	r5, [pc, #24]	@ (80079dc <_sbrk_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7f9 fef4 	bl	80017b8 <_sbrk>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_sbrk_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_sbrk_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200050c8 	.word	0x200050c8

080079e0 <_realloc_r>:
 80079e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e4:	4680      	mov	r8, r0
 80079e6:	4615      	mov	r5, r2
 80079e8:	460c      	mov	r4, r1
 80079ea:	b921      	cbnz	r1, 80079f6 <_realloc_r+0x16>
 80079ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079f0:	4611      	mov	r1, r2
 80079f2:	f7ff bc59 	b.w	80072a8 <_malloc_r>
 80079f6:	b92a      	cbnz	r2, 8007a04 <_realloc_r+0x24>
 80079f8:	f7ff fbea 	bl	80071d0 <_free_r>
 80079fc:	2400      	movs	r4, #0
 80079fe:	4620      	mov	r0, r4
 8007a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a04:	f000 f81a 	bl	8007a3c <_malloc_usable_size_r>
 8007a08:	4285      	cmp	r5, r0
 8007a0a:	4606      	mov	r6, r0
 8007a0c:	d802      	bhi.n	8007a14 <_realloc_r+0x34>
 8007a0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a12:	d8f4      	bhi.n	80079fe <_realloc_r+0x1e>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4640      	mov	r0, r8
 8007a18:	f7ff fc46 	bl	80072a8 <_malloc_r>
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0ec      	beq.n	80079fc <_realloc_r+0x1c>
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	462a      	mov	r2, r5
 8007a26:	4621      	mov	r1, r4
 8007a28:	bf28      	it	cs
 8007a2a:	4632      	movcs	r2, r6
 8007a2c:	f7ff fbc2 	bl	80071b4 <memcpy>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7ff fbcc 	bl	80071d0 <_free_r>
 8007a38:	463c      	mov	r4, r7
 8007a3a:	e7e0      	b.n	80079fe <_realloc_r+0x1e>

08007a3c <_malloc_usable_size_r>:
 8007a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a40:	1f18      	subs	r0, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfbc      	itt	lt
 8007a46:	580b      	ldrlt	r3, [r1, r0]
 8007a48:	18c0      	addlt	r0, r0, r3
 8007a4a:	4770      	bx	lr

08007a4c <_init>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr

08007a58 <_fini>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr
